# coding: utf-8

"""
    Browse API

    The Browse API has the following resources:<ul><li><b>item_summary:</b><br>Allows shoppers to search for specific items by keyword, GTIN, category, charity, product, image, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values, or UI parameters.</li><li><b>item:</b><br>Allows shoppers to retrieve the details of a specific item or all items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part.<br><br>This resource also provides a bridge between the eBay legacy APIs, such as the <a href=\"/api-docs/user-guides/static/finding-user-guide-landing.html\" target=\"_blank\">Finding</b>, and the RESTful APIs, which use different formats for the item IDs.</li></ul>The <b>item_summary</b>, <b>search_by_image</b>, and <b>item</b> resource calls require an <a href=\"/api-docs/static/oauth-client-credentials-grant.html\" target=\"_blank\">Application access token</a>.  # noqa: E501

    OpenAPI spec version: v1.20.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ItemSummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'additional_images': 'list[Image]',
        'adult_only': 'bool',
        'available_coupons': 'bool',
        'bid_count': 'int',
        'buying_options': 'list[str]',
        'categories': 'list[Category]',
        'compatibility_match': 'str',
        'compatibility_properties': 'list[CompatibilityProperty]',
        'condition': 'str',
        'condition_id': 'str',
        'current_bid_price': 'ConvertedAmount',
        'distance_from_pickup_location': 'TargetLocation',
        'energy_efficiency_class': 'str',
        'epid': 'str',
        'image': 'Image',
        'item_affiliate_web_url': 'str',
        'item_creation_date': 'str',
        'item_end_date': 'str',
        'item_group_href': 'str',
        'item_group_type': 'str',
        'item_href': 'str',
        'item_id': 'str',
        'item_location': 'ItemLocationImpl',
        'item_origin_date': 'str',
        'item_web_url': 'str',
        'leaf_category_ids': 'list[str]',
        'legacy_item_id': 'str',
        'listing_marketplace_id': 'str',
        'marketing_price': 'MarketingPrice',
        'pickup_options': 'list[PickupOptionSummary]',
        'price': 'ConvertedAmount',
        'price_display_condition': 'str',
        'priority_listing': 'bool',
        'qualified_programs': 'list[str]',
        'seller': 'Seller',
        'shipping_options': 'list[ShippingOptionSummary]',
        'short_description': 'str',
        'thumbnail_images': 'list[Image]',
        'title': 'str',
        'top_rated_buying_experience': 'bool',
        'tyre_label_image_url': 'str',
        'unit_price': 'ConvertedAmount',
        'unit_pricing_measure': 'str',
        'watch_count': 'int'
    }

    attribute_map = {
        'additional_images': 'additionalImages',
        'adult_only': 'adultOnly',
        'available_coupons': 'availableCoupons',
        'bid_count': 'bidCount',
        'buying_options': 'buyingOptions',
        'categories': 'categories',
        'compatibility_match': 'compatibilityMatch',
        'compatibility_properties': 'compatibilityProperties',
        'condition': 'condition',
        'condition_id': 'conditionId',
        'current_bid_price': 'currentBidPrice',
        'distance_from_pickup_location': 'distanceFromPickupLocation',
        'energy_efficiency_class': 'energyEfficiencyClass',
        'epid': 'epid',
        'image': 'image',
        'item_affiliate_web_url': 'itemAffiliateWebUrl',
        'item_creation_date': 'itemCreationDate',
        'item_end_date': 'itemEndDate',
        'item_group_href': 'itemGroupHref',
        'item_group_type': 'itemGroupType',
        'item_href': 'itemHref',
        'item_id': 'itemId',
        'item_location': 'itemLocation',
        'item_origin_date': 'itemOriginDate',
        'item_web_url': 'itemWebUrl',
        'leaf_category_ids': 'leafCategoryIds',
        'legacy_item_id': 'legacyItemId',
        'listing_marketplace_id': 'listingMarketplaceId',
        'marketing_price': 'marketingPrice',
        'pickup_options': 'pickupOptions',
        'price': 'price',
        'price_display_condition': 'priceDisplayCondition',
        'priority_listing': 'priorityListing',
        'qualified_programs': 'qualifiedPrograms',
        'seller': 'seller',
        'shipping_options': 'shippingOptions',
        'short_description': 'shortDescription',
        'thumbnail_images': 'thumbnailImages',
        'title': 'title',
        'top_rated_buying_experience': 'topRatedBuyingExperience',
        'tyre_label_image_url': 'tyreLabelImageUrl',
        'unit_price': 'unitPrice',
        'unit_pricing_measure': 'unitPricingMeasure',
        'watch_count': 'watchCount'
    }

    def __init__(self, additional_images=None, adult_only=None, available_coupons=None, bid_count=None, buying_options=None, categories=None, compatibility_match=None, compatibility_properties=None, condition=None, condition_id=None, current_bid_price=None, distance_from_pickup_location=None, energy_efficiency_class=None, epid=None, image=None, item_affiliate_web_url=None, item_creation_date=None, item_end_date=None, item_group_href=None, item_group_type=None, item_href=None, item_id=None, item_location=None, item_origin_date=None, item_web_url=None, leaf_category_ids=None, legacy_item_id=None, listing_marketplace_id=None, marketing_price=None, pickup_options=None, price=None, price_display_condition=None, priority_listing=None, qualified_programs=None, seller=None, shipping_options=None, short_description=None, thumbnail_images=None, title=None, top_rated_buying_experience=None, tyre_label_image_url=None, unit_price=None, unit_pricing_measure=None, watch_count=None):  # noqa: E501
        """ItemSummary - a model defined in Swagger"""  # noqa: E501
        self._additional_images = None
        self._adult_only = None
        self._available_coupons = None
        self._bid_count = None
        self._buying_options = None
        self._categories = None
        self._compatibility_match = None
        self._compatibility_properties = None
        self._condition = None
        self._condition_id = None
        self._current_bid_price = None
        self._distance_from_pickup_location = None
        self._energy_efficiency_class = None
        self._epid = None
        self._image = None
        self._item_affiliate_web_url = None
        self._item_creation_date = None
        self._item_end_date = None
        self._item_group_href = None
        self._item_group_type = None
        self._item_href = None
        self._item_id = None
        self._item_location = None
        self._item_origin_date = None
        self._item_web_url = None
        self._leaf_category_ids = None
        self._legacy_item_id = None
        self._listing_marketplace_id = None
        self._marketing_price = None
        self._pickup_options = None
        self._price = None
        self._price_display_condition = None
        self._priority_listing = None
        self._qualified_programs = None
        self._seller = None
        self._shipping_options = None
        self._short_description = None
        self._thumbnail_images = None
        self._title = None
        self._top_rated_buying_experience = None
        self._tyre_label_image_url = None
        self._unit_price = None
        self._unit_pricing_measure = None
        self._watch_count = None
        self.discriminator = None
        if additional_images is not None:
            self.additional_images = additional_images
        if adult_only is not None:
            self.adult_only = adult_only
        if available_coupons is not None:
            self.available_coupons = available_coupons
        if bid_count is not None:
            self.bid_count = bid_count
        if buying_options is not None:
            self.buying_options = buying_options
        if categories is not None:
            self.categories = categories
        if compatibility_match is not None:
            self.compatibility_match = compatibility_match
        if compatibility_properties is not None:
            self.compatibility_properties = compatibility_properties
        if condition is not None:
            self.condition = condition
        if condition_id is not None:
            self.condition_id = condition_id
        if current_bid_price is not None:
            self.current_bid_price = current_bid_price
        if distance_from_pickup_location is not None:
            self.distance_from_pickup_location = distance_from_pickup_location
        if energy_efficiency_class is not None:
            self.energy_efficiency_class = energy_efficiency_class
        if epid is not None:
            self.epid = epid
        if image is not None:
            self.image = image
        if item_affiliate_web_url is not None:
            self.item_affiliate_web_url = item_affiliate_web_url
        if item_creation_date is not None:
            self.item_creation_date = item_creation_date
        if item_end_date is not None:
            self.item_end_date = item_end_date
        if item_group_href is not None:
            self.item_group_href = item_group_href
        if item_group_type is not None:
            self.item_group_type = item_group_type
        if item_href is not None:
            self.item_href = item_href
        if item_id is not None:
            self.item_id = item_id
        if item_location is not None:
            self.item_location = item_location
        if item_origin_date is not None:
            self.item_origin_date = item_origin_date
        if item_web_url is not None:
            self.item_web_url = item_web_url
        if leaf_category_ids is not None:
            self.leaf_category_ids = leaf_category_ids
        if legacy_item_id is not None:
            self.legacy_item_id = legacy_item_id
        if listing_marketplace_id is not None:
            self.listing_marketplace_id = listing_marketplace_id
        if marketing_price is not None:
            self.marketing_price = marketing_price
        if pickup_options is not None:
            self.pickup_options = pickup_options
        if price is not None:
            self.price = price
        if price_display_condition is not None:
            self.price_display_condition = price_display_condition
        if priority_listing is not None:
            self.priority_listing = priority_listing
        if qualified_programs is not None:
            self.qualified_programs = qualified_programs
        if seller is not None:
            self.seller = seller
        if shipping_options is not None:
            self.shipping_options = shipping_options
        if short_description is not None:
            self.short_description = short_description
        if thumbnail_images is not None:
            self.thumbnail_images = thumbnail_images
        if title is not None:
            self.title = title
        if top_rated_buying_experience is not None:
            self.top_rated_buying_experience = top_rated_buying_experience
        if tyre_label_image_url is not None:
            self.tyre_label_image_url = tyre_label_image_url
        if unit_price is not None:
            self.unit_price = unit_price
        if unit_pricing_measure is not None:
            self.unit_pricing_measure = unit_pricing_measure
        if watch_count is not None:
            self.watch_count = watch_count

    @property
    def additional_images(self):
        """Gets the additional_images of this ItemSummary.  # noqa: E501

        An array of containers with the URLs for the images that are in addition to the primary image. The primary image is returned in the <code>image.imageUrl</code> field.  # noqa: E501

        :return: The additional_images of this ItemSummary.  # noqa: E501
        :rtype: list[Image]
        """
        return self._additional_images

    @additional_images.setter
    def additional_images(self, additional_images):
        """Sets the additional_images of this ItemSummary.

        An array of containers with the URLs for the images that are in addition to the primary image. The primary image is returned in the <code>image.imageUrl</code> field.  # noqa: E501

        :param additional_images: The additional_images of this ItemSummary.  # noqa: E501
        :type: list[Image]
        """

        self._additional_images = additional_images

    @property
    def adult_only(self):
        """Gets the adult_only of this ItemSummary.  # noqa: E501

        This indicates if the item is for adults only. For more information about adult-only items on eBay, refer to the <a href=\"https://www.ebay.com/help/policies/prohibited-restricted-items/adult-items-policy?id=4278 \" target=\"_blank\">Adult items policy</a>.  # noqa: E501

        :return: The adult_only of this ItemSummary.  # noqa: E501
        :rtype: bool
        """
        return self._adult_only

    @adult_only.setter
    def adult_only(self, adult_only):
        """Sets the adult_only of this ItemSummary.

        This indicates if the item is for adults only. For more information about adult-only items on eBay, refer to the <a href=\"https://www.ebay.com/help/policies/prohibited-restricted-items/adult-items-policy?id=4278 \" target=\"_blank\">Adult items policy</a>.  # noqa: E501

        :param adult_only: The adult_only of this ItemSummary.  # noqa: E501
        :type: bool
        """

        self._adult_only = adult_only

    @property
    def available_coupons(self):
        """Gets the available_coupons of this ItemSummary.  # noqa: E501

        This boolean attribute indicates if coupons are available for the item.<br><br><span class=\"tablenote\"><b>Note:</b> The Browse API only acknowledges item-level coupons. This field will only be returned as true if a coupon is linked with an item. It does not recognize store-level coupons offered by sellers across their entire store.</span>  # noqa: E501

        :return: The available_coupons of this ItemSummary.  # noqa: E501
        :rtype: bool
        """
        return self._available_coupons

    @available_coupons.setter
    def available_coupons(self, available_coupons):
        """Sets the available_coupons of this ItemSummary.

        This boolean attribute indicates if coupons are available for the item.<br><br><span class=\"tablenote\"><b>Note:</b> The Browse API only acknowledges item-level coupons. This field will only be returned as true if a coupon is linked with an item. It does not recognize store-level coupons offered by sellers across their entire store.</span>  # noqa: E501

        :param available_coupons: The available_coupons of this ItemSummary.  # noqa: E501
        :type: bool
        """

        self._available_coupons = available_coupons

    @property
    def bid_count(self):
        """Gets the bid_count of this ItemSummary.  # noqa: E501

        This integer value indicates the total number of bids that have been placed for an auction item. This field is only returned for auction items.  # noqa: E501

        :return: The bid_count of this ItemSummary.  # noqa: E501
        :rtype: int
        """
        return self._bid_count

    @bid_count.setter
    def bid_count(self, bid_count):
        """Sets the bid_count of this ItemSummary.

        This integer value indicates the total number of bids that have been placed for an auction item. This field is only returned for auction items.  # noqa: E501

        :param bid_count: The bid_count of this ItemSummary.  # noqa: E501
        :type: int
        """

        self._bid_count = bid_count

    @property
    def buying_options(self):
        """Gets the buying_options of this ItemSummary.  # noqa: E501

        A comma separated list of all the purchase options available for the item.<br><br><b>Values Returned:</b><ul><li><code>FIXED_PRICE</code><br>Indicates the buyer can purchase the item for a set price using the <i>Buy It Now</i> button.</li><li><code>AUCTION</code><br>Indicates the buyer can place a bid for the item. After the first bid is placed, this becomes a live auction item and is the only buying option for this item.</li><li><code>BEST_OFFER</code><br>Items where the buyer can send the seller a price they are willing to pay for the item. The seller can accept, reject, or send a counter offer. For additional information about Best Offer, refer to <a href=\"https://www.ebay.com/help/selling/listings/selling-buy-now/adding-best-offer-listing?id=4144 \" target=\"_blank\">Adding Best Offer to your listing and sending offers to buyers</a>.</li><li><code>CLASSIFIED_AD</code><br>Indicates that the final sales transaction is to be completed outside of the eBay environment.</li></ul>  # noqa: E501

        :return: The buying_options of this ItemSummary.  # noqa: E501
        :rtype: list[str]
        """
        return self._buying_options

    @buying_options.setter
    def buying_options(self, buying_options):
        """Sets the buying_options of this ItemSummary.

        A comma separated list of all the purchase options available for the item.<br><br><b>Values Returned:</b><ul><li><code>FIXED_PRICE</code><br>Indicates the buyer can purchase the item for a set price using the <i>Buy It Now</i> button.</li><li><code>AUCTION</code><br>Indicates the buyer can place a bid for the item. After the first bid is placed, this becomes a live auction item and is the only buying option for this item.</li><li><code>BEST_OFFER</code><br>Items where the buyer can send the seller a price they are willing to pay for the item. The seller can accept, reject, or send a counter offer. For additional information about Best Offer, refer to <a href=\"https://www.ebay.com/help/selling/listings/selling-buy-now/adding-best-offer-listing?id=4144 \" target=\"_blank\">Adding Best Offer to your listing and sending offers to buyers</a>.</li><li><code>CLASSIFIED_AD</code><br>Indicates that the final sales transaction is to be completed outside of the eBay environment.</li></ul>  # noqa: E501

        :param buying_options: The buying_options of this ItemSummary.  # noqa: E501
        :type: list[str]
        """

        self._buying_options = buying_options

    @property
    def categories(self):
        """Gets the categories of this ItemSummary.  # noqa: E501

        This array returns the name and ID of each category associated with the item, including top level, branch, and leaf categories.  # noqa: E501

        :return: The categories of this ItemSummary.  # noqa: E501
        :rtype: list[Category]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this ItemSummary.

        This array returns the name and ID of each category associated with the item, including top level, branch, and leaf categories.  # noqa: E501

        :param categories: The categories of this ItemSummary.  # noqa: E501
        :type: list[Category]
        """

        self._categories = categories

    @property
    def compatibility_match(self):
        """Gets the compatibility_match of this ItemSummary.  # noqa: E501

        This indicates how well an item matches the <code>compatibility_filter</code> product attributes.<br><br><b>Valid Values:</b><ul><li><code>EXACT</code></li><li><code>POSSIBLE</code></li></ul> For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/browse/types/gct:CompatibilityMatchEnum'>eBay API documentation</a>  # noqa: E501

        :return: The compatibility_match of this ItemSummary.  # noqa: E501
        :rtype: str
        """
        return self._compatibility_match

    @compatibility_match.setter
    def compatibility_match(self, compatibility_match):
        """Sets the compatibility_match of this ItemSummary.

        This indicates how well an item matches the <code>compatibility_filter</code> product attributes.<br><br><b>Valid Values:</b><ul><li><code>EXACT</code></li><li><code>POSSIBLE</code></li></ul> For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/browse/types/gct:CompatibilityMatchEnum'>eBay API documentation</a>  # noqa: E501

        :param compatibility_match: The compatibility_match of this ItemSummary.  # noqa: E501
        :type: str
        """

        self._compatibility_match = compatibility_match

    @property
    def compatibility_properties(self):
        """Gets the compatibility_properties of this ItemSummary.  # noqa: E501

        This container returns only the product attributes that are compatible with the item. These attributes were specified in the <code>compatibility_filter</code> in the request. This means that if you passed in 5 attributes and only 4 are compatible, only those 4 are returned. If none of the attributes are compatible, this container is not returned.  # noqa: E501

        :return: The compatibility_properties of this ItemSummary.  # noqa: E501
        :rtype: list[CompatibilityProperty]
        """
        return self._compatibility_properties

    @compatibility_properties.setter
    def compatibility_properties(self, compatibility_properties):
        """Sets the compatibility_properties of this ItemSummary.

        This container returns only the product attributes that are compatible with the item. These attributes were specified in the <code>compatibility_filter</code> in the request. This means that if you passed in 5 attributes and only 4 are compatible, only those 4 are returned. If none of the attributes are compatible, this container is not returned.  # noqa: E501

        :param compatibility_properties: The compatibility_properties of this ItemSummary.  # noqa: E501
        :type: list[CompatibilityProperty]
        """

        self._compatibility_properties = compatibility_properties

    @property
    def condition(self):
        """Gets the condition of this ItemSummary.  # noqa: E501

        The text describing the condition of the item, such as <b>New</b> or <b>Used</b>. For a list of condition names, refer to <a href=\"/api-docs/sell/static/metadata/condition-id-values.html \" target=\"_blank\">Item Condition IDs and Names</a>.  # noqa: E501

        :return: The condition of this ItemSummary.  # noqa: E501
        :rtype: str
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this ItemSummary.

        The text describing the condition of the item, such as <b>New</b> or <b>Used</b>. For a list of condition names, refer to <a href=\"/api-docs/sell/static/metadata/condition-id-values.html \" target=\"_blank\">Item Condition IDs and Names</a>.  # noqa: E501

        :param condition: The condition of this ItemSummary.  # noqa: E501
        :type: str
        """

        self._condition = condition

    @property
    def condition_id(self):
        """Gets the condition_id of this ItemSummary.  # noqa: E501

        The identifier of the condition of the item. For example, <code>1000</code> is the identifier for <code>NEW</code>. For a list of condition names and IDs, refer to <a href=\"/api-docs/sell/static/metadata/condition-id-values.html \" target=\"_blank\">Item Condition IDs and Names</a>.  # noqa: E501

        :return: The condition_id of this ItemSummary.  # noqa: E501
        :rtype: str
        """
        return self._condition_id

    @condition_id.setter
    def condition_id(self, condition_id):
        """Sets the condition_id of this ItemSummary.

        The identifier of the condition of the item. For example, <code>1000</code> is the identifier for <code>NEW</code>. For a list of condition names and IDs, refer to <a href=\"/api-docs/sell/static/metadata/condition-id-values.html \" target=\"_blank\">Item Condition IDs and Names</a>.  # noqa: E501

        :param condition_id: The condition_id of this ItemSummary.  # noqa: E501
        :type: str
        """

        self._condition_id = condition_id

    @property
    def current_bid_price(self):
        """Gets the current_bid_price of this ItemSummary.  # noqa: E501


        :return: The current_bid_price of this ItemSummary.  # noqa: E501
        :rtype: ConvertedAmount
        """
        return self._current_bid_price

    @current_bid_price.setter
    def current_bid_price(self, current_bid_price):
        """Sets the current_bid_price of this ItemSummary.


        :param current_bid_price: The current_bid_price of this ItemSummary.  # noqa: E501
        :type: ConvertedAmount
        """

        self._current_bid_price = current_bid_price

    @property
    def distance_from_pickup_location(self):
        """Gets the distance_from_pickup_location of this ItemSummary.  # noqa: E501


        :return: The distance_from_pickup_location of this ItemSummary.  # noqa: E501
        :rtype: TargetLocation
        """
        return self._distance_from_pickup_location

    @distance_from_pickup_location.setter
    def distance_from_pickup_location(self, distance_from_pickup_location):
        """Sets the distance_from_pickup_location of this ItemSummary.


        :param distance_from_pickup_location: The distance_from_pickup_location of this ItemSummary.  # noqa: E501
        :type: TargetLocation
        """

        self._distance_from_pickup_location = distance_from_pickup_location

    @property
    def energy_efficiency_class(self):
        """Gets the energy_efficiency_class of this ItemSummary.  # noqa: E501

        This indicates the <a href=\"https://en.wikipedia.org/wiki/European_Union_energy_label \" target=\"_blank\">European energy efficiency</a> rating (EEK) of the item. Energy efficiency ratings apply to products listed by commercial vendors in electronics categories only. <br><br>Currently, this field is only applicable for the Germany site, and is returned only if the seller specifies the energy efficiency rating through item specifics at listing time. Rating values include <code>A+++</code>, <code>A++</code>, <code>A+</code>, <code>A</code>, <code>B</code>, <code>C</code>, <code>D</code>, <code>E</code>, <code>F</code>, and <code>G</code>.  # noqa: E501

        :return: The energy_efficiency_class of this ItemSummary.  # noqa: E501
        :rtype: str
        """
        return self._energy_efficiency_class

    @energy_efficiency_class.setter
    def energy_efficiency_class(self, energy_efficiency_class):
        """Sets the energy_efficiency_class of this ItemSummary.

        This indicates the <a href=\"https://en.wikipedia.org/wiki/European_Union_energy_label \" target=\"_blank\">European energy efficiency</a> rating (EEK) of the item. Energy efficiency ratings apply to products listed by commercial vendors in electronics categories only. <br><br>Currently, this field is only applicable for the Germany site, and is returned only if the seller specifies the energy efficiency rating through item specifics at listing time. Rating values include <code>A+++</code>, <code>A++</code>, <code>A+</code>, <code>A</code>, <code>B</code>, <code>C</code>, <code>D</code>, <code>E</code>, <code>F</code>, and <code>G</code>.  # noqa: E501

        :param energy_efficiency_class: The energy_efficiency_class of this ItemSummary.  # noqa: E501
        :type: str
        """

        self._energy_efficiency_class = energy_efficiency_class

    @property
    def epid(self):
        """Gets the epid of this ItemSummary.  # noqa: E501

        An ePID is the eBay product identifier of a product from the eBay product catalog.  This indicates the product in which the item belongs.  # noqa: E501

        :return: The epid of this ItemSummary.  # noqa: E501
        :rtype: str
        """
        return self._epid

    @epid.setter
    def epid(self, epid):
        """Sets the epid of this ItemSummary.

        An ePID is the eBay product identifier of a product from the eBay product catalog.  This indicates the product in which the item belongs.  # noqa: E501

        :param epid: The epid of this ItemSummary.  # noqa: E501
        :type: str
        """

        self._epid = epid

    @property
    def image(self):
        """Gets the image of this ItemSummary.  # noqa: E501


        :return: The image of this ItemSummary.  # noqa: E501
        :rtype: Image
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this ItemSummary.


        :param image: The image of this ItemSummary.  # noqa: E501
        :type: Image
        """

        self._image = image

    @property
    def item_affiliate_web_url(self):
        """Gets the item_affiliate_web_url of this ItemSummary.  # noqa: E501

        The URL to the View Item page of the item which includes the affiliate tracking ID.<br><br><span class=\"tablenote\"><b>Note:</b> In order to receive commissions on sales, eBay Partner Network affiliates must use this URL to forward buyers to the listing on the eBay marketplace.</span><br>The <code>itemAffiliateWebUrl</code> is returned only if:<ul><li>The marketplace through which the item is being viewed is part of the eBay Partner Network. Currently Singapore (<code>EBAY_SG</code>) is <b>not</b> supported.<br><br>For additional information, refer to <a href=\"https://partnerhelp.ebay.com/helpcenter/s/article/countries-available-as-a-program-in-EPN?language=en_US \" target=\"_blank\">eBay Partner Network</a>.</li><li>The seller enables affiliate tracking for the item by including the <code><a href=\"/api-docs/buy/static/api-browse.html#Headers\">X-EBAY-C-ENDUSERCTX</a></code> request header in the method.</li></ul>  # noqa: E501

        :return: The item_affiliate_web_url of this ItemSummary.  # noqa: E501
        :rtype: str
        """
        return self._item_affiliate_web_url

    @item_affiliate_web_url.setter
    def item_affiliate_web_url(self, item_affiliate_web_url):
        """Sets the item_affiliate_web_url of this ItemSummary.

        The URL to the View Item page of the item which includes the affiliate tracking ID.<br><br><span class=\"tablenote\"><b>Note:</b> In order to receive commissions on sales, eBay Partner Network affiliates must use this URL to forward buyers to the listing on the eBay marketplace.</span><br>The <code>itemAffiliateWebUrl</code> is returned only if:<ul><li>The marketplace through which the item is being viewed is part of the eBay Partner Network. Currently Singapore (<code>EBAY_SG</code>) is <b>not</b> supported.<br><br>For additional information, refer to <a href=\"https://partnerhelp.ebay.com/helpcenter/s/article/countries-available-as-a-program-in-EPN?language=en_US \" target=\"_blank\">eBay Partner Network</a>.</li><li>The seller enables affiliate tracking for the item by including the <code><a href=\"/api-docs/buy/static/api-browse.html#Headers\">X-EBAY-C-ENDUSERCTX</a></code> request header in the method.</li></ul>  # noqa: E501

        :param item_affiliate_web_url: The item_affiliate_web_url of this ItemSummary.  # noqa: E501
        :type: str
        """

        self._item_affiliate_web_url = item_affiliate_web_url

    @property
    def item_creation_date(self):
        """Gets the item_creation_date of this ItemSummary.  # noqa: E501

        The date and time when the item listing was created. This value is returned in UTC format (<code>yyyy-MM-ddThh:mm:ss.sssZ</code>), which you can convert into the local time of the buyer.<br><br>This field is always returned with <b>itemSummaries</b>.  # noqa: E501

        :return: The item_creation_date of this ItemSummary.  # noqa: E501
        :rtype: str
        """
        return self._item_creation_date

    @item_creation_date.setter
    def item_creation_date(self, item_creation_date):
        """Sets the item_creation_date of this ItemSummary.

        The date and time when the item listing was created. This value is returned in UTC format (<code>yyyy-MM-ddThh:mm:ss.sssZ</code>), which you can convert into the local time of the buyer.<br><br>This field is always returned with <b>itemSummaries</b>.  # noqa: E501

        :param item_creation_date: The item_creation_date of this ItemSummary.  # noqa: E501
        :type: str
        """

        self._item_creation_date = item_creation_date

    @property
    def item_end_date(self):
        """Gets the item_end_date of this ItemSummary.  # noqa: E501

        A timestamp that indicates the date and time a listing is scheduled to end.<br><br>This value is returned in UTC format (<code>yyyy-MM-ddThh:mm:ss.sssZ</code>), which can be converted into the local time of the buyer.  # noqa: E501

        :return: The item_end_date of this ItemSummary.  # noqa: E501
        :rtype: str
        """
        return self._item_end_date

    @item_end_date.setter
    def item_end_date(self, item_end_date):
        """Sets the item_end_date of this ItemSummary.

        A timestamp that indicates the date and time a listing is scheduled to end.<br><br>This value is returned in UTC format (<code>yyyy-MM-ddThh:mm:ss.sssZ</code>), which can be converted into the local time of the buyer.  # noqa: E501

        :param item_end_date: The item_end_date of this ItemSummary.  # noqa: E501
        :type: str
        """

        self._item_end_date = item_end_date

    @property
    def item_group_href(self):
        """Gets the item_group_href of this ItemSummary.  # noqa: E501

        The HATEOAS reference of the parent page of the item group. An item group is an item that has various aspect differences, such as color, size, storage capacity, etc.<br><br><span class=\"tablenote\"><b>Note:</b> This field is returned only for item groups.</span>  # noqa: E501

        :return: The item_group_href of this ItemSummary.  # noqa: E501
        :rtype: str
        """
        return self._item_group_href

    @item_group_href.setter
    def item_group_href(self, item_group_href):
        """Sets the item_group_href of this ItemSummary.

        The HATEOAS reference of the parent page of the item group. An item group is an item that has various aspect differences, such as color, size, storage capacity, etc.<br><br><span class=\"tablenote\"><b>Note:</b> This field is returned only for item groups.</span>  # noqa: E501

        :param item_group_href: The item_group_href of this ItemSummary.  # noqa: E501
        :type: str
        """

        self._item_group_href = item_group_href

    @property
    def item_group_type(self):
        """Gets the item_group_type of this ItemSummary.  # noqa: E501

        The indicates the item group type. An item group is an item that has various aspect differences, such as color, size, storage capacity, etc. <br><br>Currently only the <code>SELLER_DEFINED_VARIATIONS</code> is supported and indicates this is an item group created by the seller.<br><br><span class=\"tablenote\"><b>Note:</b> This field is returned only for item groups.</span>  # noqa: E501

        :return: The item_group_type of this ItemSummary.  # noqa: E501
        :rtype: str
        """
        return self._item_group_type

    @item_group_type.setter
    def item_group_type(self, item_group_type):
        """Sets the item_group_type of this ItemSummary.

        The indicates the item group type. An item group is an item that has various aspect differences, such as color, size, storage capacity, etc. <br><br>Currently only the <code>SELLER_DEFINED_VARIATIONS</code> is supported and indicates this is an item group created by the seller.<br><br><span class=\"tablenote\"><b>Note:</b> This field is returned only for item groups.</span>  # noqa: E501

        :param item_group_type: The item_group_type of this ItemSummary.  # noqa: E501
        :type: str
        """

        self._item_group_type = item_group_type

    @property
    def item_href(self):
        """Gets the item_href of this ItemSummary.  # noqa: E501

        The URI for the Browse API <a href=\"/api-docs/buy/browse/resources/item/methods/getItem\" target=\"_blank\">getItem</a> method, which can be used to retrieve more details about items in the search results.  # noqa: E501

        :return: The item_href of this ItemSummary.  # noqa: E501
        :rtype: str
        """
        return self._item_href

    @item_href.setter
    def item_href(self, item_href):
        """Sets the item_href of this ItemSummary.

        The URI for the Browse API <a href=\"/api-docs/buy/browse/resources/item/methods/getItem\" target=\"_blank\">getItem</a> method, which can be used to retrieve more details about items in the search results.  # noqa: E501

        :param item_href: The item_href of this ItemSummary.  # noqa: E501
        :type: str
        """

        self._item_href = item_href

    @property
    def item_id(self):
        """Gets the item_id of this ItemSummary.  # noqa: E501

        The unique RESTful identifier of the item.  # noqa: E501

        :return: The item_id of this ItemSummary.  # noqa: E501
        :rtype: str
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id):
        """Sets the item_id of this ItemSummary.

        The unique RESTful identifier of the item.  # noqa: E501

        :param item_id: The item_id of this ItemSummary.  # noqa: E501
        :type: str
        """

        self._item_id = item_id

    @property
    def item_location(self):
        """Gets the item_location of this ItemSummary.  # noqa: E501


        :return: The item_location of this ItemSummary.  # noqa: E501
        :rtype: ItemLocationImpl
        """
        return self._item_location

    @item_location.setter
    def item_location(self, item_location):
        """Sets the item_location of this ItemSummary.


        :param item_location: The item_location of this ItemSummary.  # noqa: E501
        :type: ItemLocationImpl
        """

        self._item_location = item_location

    @property
    def item_origin_date(self):
        """Gets the item_origin_date of this ItemSummary.  # noqa: E501

        The date and time when the listing was first made available. This date will be retained if an item is relisted. This value is returned in UTC format (<code>yyyy-MM-ddThh:mm:ss.sssZ</code>), which you can convert into the local time of the buyer.<br><br>This timestamp is used to sort the response when the <code>sort=newlyListed</code> parameter is used.<br><br>This field is always returned with <b>itemSummaries</b>.  # noqa: E501

        :return: The item_origin_date of this ItemSummary.  # noqa: E501
        :rtype: str
        """
        return self._item_origin_date

    @item_origin_date.setter
    def item_origin_date(self, item_origin_date):
        """Sets the item_origin_date of this ItemSummary.

        The date and time when the listing was first made available. This date will be retained if an item is relisted. This value is returned in UTC format (<code>yyyy-MM-ddThh:mm:ss.sssZ</code>), which you can convert into the local time of the buyer.<br><br>This timestamp is used to sort the response when the <code>sort=newlyListed</code> parameter is used.<br><br>This field is always returned with <b>itemSummaries</b>.  # noqa: E501

        :param item_origin_date: The item_origin_date of this ItemSummary.  # noqa: E501
        :type: str
        """

        self._item_origin_date = item_origin_date

    @property
    def item_web_url(self):
        """Gets the item_web_url of this ItemSummary.  # noqa: E501

        The URL to the View Item page of the item. This enables you to include a \"Report Item on eBay\" hyperlink that takes the buyer to the View Item page on eBay. From there they can report any issues regarding this item to eBay.  # noqa: E501

        :return: The item_web_url of this ItemSummary.  # noqa: E501
        :rtype: str
        """
        return self._item_web_url

    @item_web_url.setter
    def item_web_url(self, item_web_url):
        """Sets the item_web_url of this ItemSummary.

        The URL to the View Item page of the item. This enables you to include a \"Report Item on eBay\" hyperlink that takes the buyer to the View Item page on eBay. From there they can report any issues regarding this item to eBay.  # noqa: E501

        :param item_web_url: The item_web_url of this ItemSummary.  # noqa: E501
        :type: str
        """

        self._item_web_url = item_web_url

    @property
    def leaf_category_ids(self):
        """Gets the leaf_category_ids of this ItemSummary.  # noqa: E501

        The leaf category IDs of the item. When the item belongs to two leaf categories, the ID values are returned in the order primary, secondary.  # noqa: E501

        :return: The leaf_category_ids of this ItemSummary.  # noqa: E501
        :rtype: list[str]
        """
        return self._leaf_category_ids

    @leaf_category_ids.setter
    def leaf_category_ids(self, leaf_category_ids):
        """Sets the leaf_category_ids of this ItemSummary.

        The leaf category IDs of the item. When the item belongs to two leaf categories, the ID values are returned in the order primary, secondary.  # noqa: E501

        :param leaf_category_ids: The leaf_category_ids of this ItemSummary.  # noqa: E501
        :type: list[str]
        """

        self._leaf_category_ids = leaf_category_ids

    @property
    def legacy_item_id(self):
        """Gets the legacy_item_id of this ItemSummary.  # noqa: E501

        The unique identifier of the eBay listing that contains the item. This is the traditional/legacy ID that is often seen in the URL of the listing View Item page.  # noqa: E501

        :return: The legacy_item_id of this ItemSummary.  # noqa: E501
        :rtype: str
        """
        return self._legacy_item_id

    @legacy_item_id.setter
    def legacy_item_id(self, legacy_item_id):
        """Sets the legacy_item_id of this ItemSummary.

        The unique identifier of the eBay listing that contains the item. This is the traditional/legacy ID that is often seen in the URL of the listing View Item page.  # noqa: E501

        :param legacy_item_id: The legacy_item_id of this ItemSummary.  # noqa: E501
        :type: str
        """

        self._legacy_item_id = legacy_item_id

    @property
    def listing_marketplace_id(self):
        """Gets the listing_marketplace_id of this ItemSummary.  # noqa: E501

        The ID of the eBay marketplace on which the seller listed the item. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/browse/types/ba:MarketplaceIdEnum'>eBay API documentation</a>  # noqa: E501

        :return: The listing_marketplace_id of this ItemSummary.  # noqa: E501
        :rtype: str
        """
        return self._listing_marketplace_id

    @listing_marketplace_id.setter
    def listing_marketplace_id(self, listing_marketplace_id):
        """Sets the listing_marketplace_id of this ItemSummary.

        The ID of the eBay marketplace on which the seller listed the item. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/browse/types/ba:MarketplaceIdEnum'>eBay API documentation</a>  # noqa: E501

        :param listing_marketplace_id: The listing_marketplace_id of this ItemSummary.  # noqa: E501
        :type: str
        """

        self._listing_marketplace_id = listing_marketplace_id

    @property
    def marketing_price(self):
        """Gets the marketing_price of this ItemSummary.  # noqa: E501


        :return: The marketing_price of this ItemSummary.  # noqa: E501
        :rtype: MarketingPrice
        """
        return self._marketing_price

    @marketing_price.setter
    def marketing_price(self, marketing_price):
        """Sets the marketing_price of this ItemSummary.


        :param marketing_price: The marketing_price of this ItemSummary.  # noqa: E501
        :type: MarketingPrice
        """

        self._marketing_price = marketing_price

    @property
    def pickup_options(self):
        """Gets the pickup_options of this ItemSummary.  # noqa: E501

        This container returns the local pickup options available to the buyer. This container is returned only if the user is searching for local pickup items and set the local pickup filters in the method request.  # noqa: E501

        :return: The pickup_options of this ItemSummary.  # noqa: E501
        :rtype: list[PickupOptionSummary]
        """
        return self._pickup_options

    @pickup_options.setter
    def pickup_options(self, pickup_options):
        """Sets the pickup_options of this ItemSummary.

        This container returns the local pickup options available to the buyer. This container is returned only if the user is searching for local pickup items and set the local pickup filters in the method request.  # noqa: E501

        :param pickup_options: The pickup_options of this ItemSummary.  # noqa: E501
        :type: list[PickupOptionSummary]
        """

        self._pickup_options = pickup_options

    @property
    def price(self):
        """Gets the price of this ItemSummary.  # noqa: E501


        :return: The price of this ItemSummary.  # noqa: E501
        :rtype: ConvertedAmount
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this ItemSummary.


        :param price: The price of this ItemSummary.  # noqa: E501
        :type: ConvertedAmount
        """

        self._price = price

    @property
    def price_display_condition(self):
        """Gets the price_display_condition of this ItemSummary.  # noqa: E501

        Indicates when in the buying flow the item's price can appear for minimum advertised price (MAP) items, which is the lowest price a retailer can advertise/show for this item. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/browse/types/gct:PriceDisplayConditionEnum'>eBay API documentation</a>  # noqa: E501

        :return: The price_display_condition of this ItemSummary.  # noqa: E501
        :rtype: str
        """
        return self._price_display_condition

    @price_display_condition.setter
    def price_display_condition(self, price_display_condition):
        """Sets the price_display_condition of this ItemSummary.

        Indicates when in the buying flow the item's price can appear for minimum advertised price (MAP) items, which is the lowest price a retailer can advertise/show for this item. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/browse/types/gct:PriceDisplayConditionEnum'>eBay API documentation</a>  # noqa: E501

        :param price_display_condition: The price_display_condition of this ItemSummary.  # noqa: E501
        :type: str
        """

        self._price_display_condition = price_display_condition

    @property
    def priority_listing(self):
        """Gets the priority_listing of this ItemSummary.  # noqa: E501

        This field is returned as <code>true</code> if the listing is part of a Promoted Listing campaign. Promoted Listings are available to <b>Above Standard</b> and <b>Top Rated</b> sellers with recent sales activity.<br><br><span class=\"tablenote\"><b>Note:</b> Priority Listing is returned only with a Best Match sort and will not be returned for other sort options.</span>  # noqa: E501

        :return: The priority_listing of this ItemSummary.  # noqa: E501
        :rtype: bool
        """
        return self._priority_listing

    @priority_listing.setter
    def priority_listing(self, priority_listing):
        """Sets the priority_listing of this ItemSummary.

        This field is returned as <code>true</code> if the listing is part of a Promoted Listing campaign. Promoted Listings are available to <b>Above Standard</b> and <b>Top Rated</b> sellers with recent sales activity.<br><br><span class=\"tablenote\"><b>Note:</b> Priority Listing is returned only with a Best Match sort and will not be returned for other sort options.</span>  # noqa: E501

        :param priority_listing: The priority_listing of this ItemSummary.  # noqa: E501
        :type: bool
        """

        self._priority_listing = priority_listing

    @property
    def qualified_programs(self):
        """Gets the qualified_programs of this ItemSummary.  # noqa: E501

        An array of the qualified programs available for the item, such as <code>EBAY_PLUS</code>, <code>AUTHENTICITY_GUARANTEE</code>, and <code>AUTHENTICITY_VERIFICATION</code>.<br><br>eBay Plus is a premium account option for buyers, which provides benefits such as fast, free domestic shipping and free returns on selected items. Top-Rated eBay sellers must opt in to eBay Plus to be able to offer the program on qualifying listings. Sellers must commit to next-day delivery of those items.<br><br><span class=\"tablenote\"><b>Note: </b> eBay Plus is available only to buyers in the Germany, Austria, and Australia marketplaces.</span><br><br>The eBay <a href=\"https://pages.ebay.com/authenticity-guarantee/ \" target=\"_blank\">Authenticity Guarantee</a> program enables third-party authenticators to perform authentication verification inspections on items such as watches and sneakers.  # noqa: E501

        :return: The qualified_programs of this ItemSummary.  # noqa: E501
        :rtype: list[str]
        """
        return self._qualified_programs

    @qualified_programs.setter
    def qualified_programs(self, qualified_programs):
        """Sets the qualified_programs of this ItemSummary.

        An array of the qualified programs available for the item, such as <code>EBAY_PLUS</code>, <code>AUTHENTICITY_GUARANTEE</code>, and <code>AUTHENTICITY_VERIFICATION</code>.<br><br>eBay Plus is a premium account option for buyers, which provides benefits such as fast, free domestic shipping and free returns on selected items. Top-Rated eBay sellers must opt in to eBay Plus to be able to offer the program on qualifying listings. Sellers must commit to next-day delivery of those items.<br><br><span class=\"tablenote\"><b>Note: </b> eBay Plus is available only to buyers in the Germany, Austria, and Australia marketplaces.</span><br><br>The eBay <a href=\"https://pages.ebay.com/authenticity-guarantee/ \" target=\"_blank\">Authenticity Guarantee</a> program enables third-party authenticators to perform authentication verification inspections on items such as watches and sneakers.  # noqa: E501

        :param qualified_programs: The qualified_programs of this ItemSummary.  # noqa: E501
        :type: list[str]
        """

        self._qualified_programs = qualified_programs

    @property
    def seller(self):
        """Gets the seller of this ItemSummary.  # noqa: E501


        :return: The seller of this ItemSummary.  # noqa: E501
        :rtype: Seller
        """
        return self._seller

    @seller.setter
    def seller(self, seller):
        """Sets the seller of this ItemSummary.


        :param seller: The seller of this ItemSummary.  # noqa: E501
        :type: Seller
        """

        self._seller = seller

    @property
    def shipping_options(self):
        """Gets the shipping_options of this ItemSummary.  # noqa: E501

        This container returns the shipping options available to ship the item.  # noqa: E501

        :return: The shipping_options of this ItemSummary.  # noqa: E501
        :rtype: list[ShippingOptionSummary]
        """
        return self._shipping_options

    @shipping_options.setter
    def shipping_options(self, shipping_options):
        """Sets the shipping_options of this ItemSummary.

        This container returns the shipping options available to ship the item.  # noqa: E501

        :param shipping_options: The shipping_options of this ItemSummary.  # noqa: E501
        :type: list[ShippingOptionSummary]
        """

        self._shipping_options = shipping_options

    @property
    def short_description(self):
        """Gets the short_description of this ItemSummary.  # noqa: E501

        This text string is derived from the item condition and the item aspects (such as size, color, capacity, model, brand, etc.) Sometimes the title does not provide enough information but the description is too big. Surfacing the <code>shortDescription</code> can often provide buyers with the additional information that could help them make a buying decision.<br><br>For example:<pre>\"<b>title</b>\": \"Petrel U42W FPV Drone RC Quadcopter w/HD Camera Live Video One Key Off / Landing\",<br>\"<b>shortDescription</b>\": \"1 U42W Quadcopter. Syma X5SW-V3 Wifi FPV RC Drone Quadcopter 2.4Ghz 6-Axis Gyro with Headless Mode. Syma X20 Pocket Drone 2.4Ghz Mini RC Quadcopter Headless Mode Altitude Hold. One Key Take Off / Landing function: allow beginner to easy to fly the drone without any skill.\",</pre><br><b>Restriction:</b> This field is returned by the <b>search</b> method only when <code>fieldgroups</code> = <code>EXTENDED</code>.  # noqa: E501

        :return: The short_description of this ItemSummary.  # noqa: E501
        :rtype: str
        """
        return self._short_description

    @short_description.setter
    def short_description(self, short_description):
        """Sets the short_description of this ItemSummary.

        This text string is derived from the item condition and the item aspects (such as size, color, capacity, model, brand, etc.) Sometimes the title does not provide enough information but the description is too big. Surfacing the <code>shortDescription</code> can often provide buyers with the additional information that could help them make a buying decision.<br><br>For example:<pre>\"<b>title</b>\": \"Petrel U42W FPV Drone RC Quadcopter w/HD Camera Live Video One Key Off / Landing\",<br>\"<b>shortDescription</b>\": \"1 U42W Quadcopter. Syma X5SW-V3 Wifi FPV RC Drone Quadcopter 2.4Ghz 6-Axis Gyro with Headless Mode. Syma X20 Pocket Drone 2.4Ghz Mini RC Quadcopter Headless Mode Altitude Hold. One Key Take Off / Landing function: allow beginner to easy to fly the drone without any skill.\",</pre><br><b>Restriction:</b> This field is returned by the <b>search</b> method only when <code>fieldgroups</code> = <code>EXTENDED</code>.  # noqa: E501

        :param short_description: The short_description of this ItemSummary.  # noqa: E501
        :type: str
        """

        self._short_description = short_description

    @property
    def thumbnail_images(self):
        """Gets the thumbnail_images of this ItemSummary.  # noqa: E501

        An array of thumbnail images for the item.  # noqa: E501

        :return: The thumbnail_images of this ItemSummary.  # noqa: E501
        :rtype: list[Image]
        """
        return self._thumbnail_images

    @thumbnail_images.setter
    def thumbnail_images(self, thumbnail_images):
        """Sets the thumbnail_images of this ItemSummary.

        An array of thumbnail images for the item.  # noqa: E501

        :param thumbnail_images: The thumbnail_images of this ItemSummary.  # noqa: E501
        :type: list[Image]
        """

        self._thumbnail_images = thumbnail_images

    @property
    def title(self):
        """Gets the title of this ItemSummary.  # noqa: E501

        The seller-created title of the item.<br><br><b>Maximum Length:</b> 80 characters  # noqa: E501

        :return: The title of this ItemSummary.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ItemSummary.

        The seller-created title of the item.<br><br><b>Maximum Length:</b> 80 characters  # noqa: E501

        :param title: The title of this ItemSummary.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def top_rated_buying_experience(self):
        """Gets the top_rated_buying_experience of this ItemSummary.  # noqa: E501

        This indicates if the item is a top-rated plus item. There are three benefits of a top-rated plus item: a  minimum 30-day money-back return policy; shipping the item in 1 business day with tracking provided; and the added comfort of knowing that this item is from an experienced seller with the highest buyer ratings. For more information, refer to <a href=\"https://pages.ebay.com/topratedplus/index.html \" target=\"_blank\">Look for Top Rated Plus Items</a> and <a href=\"https://www.ebay.com/help/selling/seller-levels-performance-standards/seller-levels-performance-standards?id=4080 \" target=\"_blank\">Seller performance overview</a>.  # noqa: E501

        :return: The top_rated_buying_experience of this ItemSummary.  # noqa: E501
        :rtype: bool
        """
        return self._top_rated_buying_experience

    @top_rated_buying_experience.setter
    def top_rated_buying_experience(self, top_rated_buying_experience):
        """Sets the top_rated_buying_experience of this ItemSummary.

        This indicates if the item is a top-rated plus item. There are three benefits of a top-rated plus item: a  minimum 30-day money-back return policy; shipping the item in 1 business day with tracking provided; and the added comfort of knowing that this item is from an experienced seller with the highest buyer ratings. For more information, refer to <a href=\"https://pages.ebay.com/topratedplus/index.html \" target=\"_blank\">Look for Top Rated Plus Items</a> and <a href=\"https://www.ebay.com/help/selling/seller-levels-performance-standards/seller-levels-performance-standards?id=4080 \" target=\"_blank\">Seller performance overview</a>.  # noqa: E501

        :param top_rated_buying_experience: The top_rated_buying_experience of this ItemSummary.  # noqa: E501
        :type: bool
        """

        self._top_rated_buying_experience = top_rated_buying_experience

    @property
    def tyre_label_image_url(self):
        """Gets the tyre_label_image_url of this ItemSummary.  # noqa: E501

        The URL to the image that shows the information on the tyre label.  # noqa: E501

        :return: The tyre_label_image_url of this ItemSummary.  # noqa: E501
        :rtype: str
        """
        return self._tyre_label_image_url

    @tyre_label_image_url.setter
    def tyre_label_image_url(self, tyre_label_image_url):
        """Sets the tyre_label_image_url of this ItemSummary.

        The URL to the image that shows the information on the tyre label.  # noqa: E501

        :param tyre_label_image_url: The tyre_label_image_url of this ItemSummary.  # noqa: E501
        :type: str
        """

        self._tyre_label_image_url = tyre_label_image_url

    @property
    def unit_price(self):
        """Gets the unit_price of this ItemSummary.  # noqa: E501


        :return: The unit_price of this ItemSummary.  # noqa: E501
        :rtype: ConvertedAmount
        """
        return self._unit_price

    @unit_price.setter
    def unit_price(self, unit_price):
        """Sets the unit_price of this ItemSummary.


        :param unit_price: The unit_price of this ItemSummary.  # noqa: E501
        :type: ConvertedAmount
        """

        self._unit_price = unit_price

    @property
    def unit_pricing_measure(self):
        """Gets the unit_pricing_measure of this ItemSummary.  # noqa: E501

        The designation, such as size, weight, volume, count, etc., that was used to specify the quantity of the item. This helps buyers compare prices.<br><br>For example, the following tells the buyer that the item is 7.99 per 100 grams.<pre>\"unitPricingMeasure\": \"100g\",<br> \"unitPrice\": {<br>&nbsp;&nbsp;\"value\": \"7.99\",<br>&nbsp;&nbsp;\"currency\": \"GBP\"</pre>  # noqa: E501

        :return: The unit_pricing_measure of this ItemSummary.  # noqa: E501
        :rtype: str
        """
        return self._unit_pricing_measure

    @unit_pricing_measure.setter
    def unit_pricing_measure(self, unit_pricing_measure):
        """Sets the unit_pricing_measure of this ItemSummary.

        The designation, such as size, weight, volume, count, etc., that was used to specify the quantity of the item. This helps buyers compare prices.<br><br>For example, the following tells the buyer that the item is 7.99 per 100 grams.<pre>\"unitPricingMeasure\": \"100g\",<br> \"unitPrice\": {<br>&nbsp;&nbsp;\"value\": \"7.99\",<br>&nbsp;&nbsp;\"currency\": \"GBP\"</pre>  # noqa: E501

        :param unit_pricing_measure: The unit_pricing_measure of this ItemSummary.  # noqa: E501
        :type: str
        """

        self._unit_pricing_measure = unit_pricing_measure

    @property
    def watch_count(self):
        """Gets the watch_count of this ItemSummary.  # noqa: E501

        The number of users that have added the item to their watch list.<br><br><span class=\"tablenote\"><b>Note:</b> This field is restricted to applications that have been granted permission to access this feature. You must submit an <a href=\"/my/support/tickets?tab=app-check \" target=\"_blank\">App Check ticket</a> to request this access. In the App Check form, add a note to the <b>Application Title/Summary</b> and/or <b>Application Details</b> fields indicating that you want access to Watch Count data in the Browse API.</span>  # noqa: E501

        :return: The watch_count of this ItemSummary.  # noqa: E501
        :rtype: int
        """
        return self._watch_count

    @watch_count.setter
    def watch_count(self, watch_count):
        """Sets the watch_count of this ItemSummary.

        The number of users that have added the item to their watch list.<br><br><span class=\"tablenote\"><b>Note:</b> This field is restricted to applications that have been granted permission to access this feature. You must submit an <a href=\"/my/support/tickets?tab=app-check \" target=\"_blank\">App Check ticket</a> to request this access. In the App Check form, add a note to the <b>Application Title/Summary</b> and/or <b>Application Details</b> fields indicating that you want access to Watch Count data in the Browse API.</span>  # noqa: E501

        :param watch_count: The watch_count of this ItemSummary.  # noqa: E501
        :type: int
        """

        self._watch_count = watch_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ItemSummary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ItemSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
