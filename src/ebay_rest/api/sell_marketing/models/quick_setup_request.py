# coding: utf-8

"""
    Marketing API

    <p>The <i>Marketing API </i> offers two platforms that sellers can use to promote and advertise their products:</p> <ul><li><b>Promoted Listings</b> is an eBay ad service that lets sellers set up <i>ad campaigns </i> for the products they want to promote. eBay displays the ads in search results and in other marketing modules as <b>SPONSORED</b> listings. If an item in a Promoted Listings campaign sells, the seller is assessed a Promoted Listings fee, which is a seller-specified percentage applied to the sales price. For complete details, refer to the <a href=\"/api-docs/sell/static/marketing/pl-landing.html\">Promoted Listings playbook</a>.</li><li><b>Promotions Manager</b> gives sellers a way to offer discounts on specific items as a way to attract buyers to their inventory. Sellers can set up discounts (such as \"20% off\" and other types of offers) on specific items or on an entire customer order. To further attract buyers, eBay prominently displays promotion <i>teasers</i> throughout buyer flows. For complete details, see <a href=\"/api-docs/sell/static/marketing/promotions-manager.html\">Promotions Manager</a>.</li></ul>  <p><b>Marketing reports</b>, on both the Promoted Listings and Promotions Manager platforms, give sellers information that shows the effectiveness of their marketing strategies. The data gives sellers the ability to review and fine tune their marketing efforts.</p><p><b>Store Email Campaign</b> allows sellers to create and send email campaigns to customers who have signed up to receive their newsletter. For more information on email campaigns, see <a href=\"/api-docs/sell/static/marketing/store-email-campaigns.html#email-campain-types\" target=\"_blank\">Store Email Campaigns</a>.<p class=\"tablenote\"><b>Important!</b> Sellers must have an active eBay Store subscription, and they must accept the <b>Terms and Conditions</b> before they can make requests to these APIs in the Production environment. There are also site-specific listings requirements and restrictions associated with these marketing tools, as listed in the \"requirements and restrictions\" sections for <a href=\"/api-docs/sell/marketing/static/overview.html#PL-requirements\">Promoted Listings</a> and <a href=\"/api-docs/sell/marketing/static/overview.html#PM-requirements\">Promotions Manager</a>.</p> <p>The table below lists all the Marketing API calls grouped by resource.</p>  # noqa: E501

    OpenAPI spec version: v1.22.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class QuickSetupRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'budget': 'CampaignBudgetRequest',
        'campaign_name': 'str',
        'end_date': 'str',
        'listing_ids': 'list[str]',
        'marketplace_id': 'str',
        'start_date': 'str'
    }

    attribute_map = {
        'budget': 'budget',
        'campaign_name': 'campaignName',
        'end_date': 'endDate',
        'listing_ids': 'listingIds',
        'marketplace_id': 'marketplaceId',
        'start_date': 'startDate'
    }

    def __init__(self, budget=None, campaign_name=None, end_date=None, listing_ids=None, marketplace_id=None, start_date=None):  # noqa: E501
        """QuickSetupRequest - a model defined in Swagger"""  # noqa: E501
        self._budget = None
        self._campaign_name = None
        self._end_date = None
        self._listing_ids = None
        self._marketplace_id = None
        self._start_date = None
        self.discriminator = None
        if budget is not None:
            self.budget = budget
        if campaign_name is not None:
            self.campaign_name = campaign_name
        if end_date is not None:
            self.end_date = end_date
        if listing_ids is not None:
            self.listing_ids = listing_ids
        if marketplace_id is not None:
            self.marketplace_id = marketplace_id
        if start_date is not None:
            self.start_date = start_date

    @property
    def budget(self):
        """Gets the budget of this QuickSetupRequest.  # noqa: E501


        :return: The budget of this QuickSetupRequest.  # noqa: E501
        :rtype: CampaignBudgetRequest
        """
        return self._budget

    @budget.setter
    def budget(self, budget):
        """Sets the budget of this QuickSetupRequest.


        :param budget: The budget of this QuickSetupRequest.  # noqa: E501
        :type: CampaignBudgetRequest
        """

        self._budget = budget

    @property
    def campaign_name(self):
        """Gets the campaign_name of this QuickSetupRequest.  # noqa: E501

        The seller-defined name for the campaign. This value must be unique for the seller.<br><br> You can use any alphanumeric characters in the name, except for the less than (<code><</code>) and greater than (<code>></code>) characters.<br><br><b>Max Length</b>: 80 characters  # noqa: E501

        :return: The campaign_name of this QuickSetupRequest.  # noqa: E501
        :rtype: str
        """
        return self._campaign_name

    @campaign_name.setter
    def campaign_name(self, campaign_name):
        """Sets the campaign_name of this QuickSetupRequest.

        The seller-defined name for the campaign. This value must be unique for the seller.<br><br> You can use any alphanumeric characters in the name, except for the less than (<code><</code>) and greater than (<code>></code>) characters.<br><br><b>Max Length</b>: 80 characters  # noqa: E501

        :param campaign_name: The campaign_name of this QuickSetupRequest.  # noqa: E501
        :type: str
        """

        self._campaign_name = campaign_name

    @property
    def end_date(self):
        """Gets the end_date of this QuickSetupRequest.  # noqa: E501

        The date and time the campaign is scheduled to end, in UTC format (<code>yyyy-MM-ddThh:mm:ss.sssZ</code>).<br><br>If this field is omitted, the campaign will have no defined end date, and will not end until the seller ends the campaign using the <a href= \"/api-docs/sell/marketing/resources/campaign/methods/endCampaign\">endCampaign</a> method, or if they update the campaign to include an end date using the <a href= \"/api-docs/sell/marketing/resources/campaign/methods/updateCampaignIdentification\">updateCampaignIdentification</a> method. This date must be further in the future than the <b>startDate</b>.   # noqa: E501

        :return: The end_date of this QuickSetupRequest.  # noqa: E501
        :rtype: str
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this QuickSetupRequest.

        The date and time the campaign is scheduled to end, in UTC format (<code>yyyy-MM-ddThh:mm:ss.sssZ</code>).<br><br>If this field is omitted, the campaign will have no defined end date, and will not end until the seller ends the campaign using the <a href= \"/api-docs/sell/marketing/resources/campaign/methods/endCampaign\">endCampaign</a> method, or if they update the campaign to include an end date using the <a href= \"/api-docs/sell/marketing/resources/campaign/methods/updateCampaignIdentification\">updateCampaignIdentification</a> method. This date must be further in the future than the <b>startDate</b>.   # noqa: E501

        :param end_date: The end_date of this QuickSetupRequest.  # noqa: E501
        :type: str
        """

        self._end_date = end_date

    @property
    def listing_ids(self):
        """Gets the listing_ids of this QuickSetupRequest.  # noqa: E501

        This array includes the listing Ids of the items that are to be associated with the priority strategy campaign. eBay will create ad groups and keywords for these listings and add them to the campaign.<br><br> Each value must be delimited by a comma. A maximum of 1000 listing Ids can be added to a campaign created using the <b>setupQuickCampaign</b> method.   # noqa: E501

        :return: The listing_ids of this QuickSetupRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._listing_ids

    @listing_ids.setter
    def listing_ids(self, listing_ids):
        """Sets the listing_ids of this QuickSetupRequest.

        This array includes the listing Ids of the items that are to be associated with the priority strategy campaign. eBay will create ad groups and keywords for these listings and add them to the campaign.<br><br> Each value must be delimited by a comma. A maximum of 1000 listing Ids can be added to a campaign created using the <b>setupQuickCampaign</b> method.   # noqa: E501

        :param listing_ids: The listing_ids of this QuickSetupRequest.  # noqa: E501
        :type: list[str]
        """

        self._listing_ids = listing_ids

    @property
    def marketplace_id(self):
        """Gets the marketplace_id of this QuickSetupRequest.  # noqa: E501

        The Id of the marketplace where the campaign is hosted. See the <a href= \"/api-docs/sell/marketing/types/api:MarketplaceIdEnum\">MarkeplaceIdEnum</a> type for more details.  For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/marketing/types/ba:MarketplaceIdEnum'>eBay API documentation</a>  # noqa: E501

        :return: The marketplace_id of this QuickSetupRequest.  # noqa: E501
        :rtype: str
        """
        return self._marketplace_id

    @marketplace_id.setter
    def marketplace_id(self, marketplace_id):
        """Sets the marketplace_id of this QuickSetupRequest.

        The Id of the marketplace where the campaign is hosted. See the <a href= \"/api-docs/sell/marketing/types/api:MarketplaceIdEnum\">MarkeplaceIdEnum</a> type for more details.  For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/marketing/types/ba:MarketplaceIdEnum'>eBay API documentation</a>  # noqa: E501

        :param marketplace_id: The marketplace_id of this QuickSetupRequest.  # noqa: E501
        :type: str
        """

        self._marketplace_id = marketplace_id

    @property
    def start_date(self):
        """Gets the start_date of this QuickSetupRequest.  # noqa: E501

        The date and time the campaign is scheduled to start, in UTC format (<code>yyyy-MM-ddThh:mm:ss.sssZ</code>).<br><br> On the specified date, the service derives the keywords for each listing in the campaign, creates an ad for each listing, and associates each new ad with the campaign. The campaign starts once this process is completed. The amount of time it takes the service to start the campaign depends on the number of listings in the campaign.<br><br><span class=\"tablenote\"><b>Note:</b> If the <b>startDate</b> has passed by the time the seller launches a campaign, the campaign will be updated to <code>RUNNING</code> status. If the seller launches a campaign before the <b>startDate</b>, the campaign will be updated to <code>SCHEDULED</code> status and will change to <code>RUNNING</code> status at the time of the specified <b>startDate</b>.</span>  # noqa: E501

        :return: The start_date of this QuickSetupRequest.  # noqa: E501
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this QuickSetupRequest.

        The date and time the campaign is scheduled to start, in UTC format (<code>yyyy-MM-ddThh:mm:ss.sssZ</code>).<br><br> On the specified date, the service derives the keywords for each listing in the campaign, creates an ad for each listing, and associates each new ad with the campaign. The campaign starts once this process is completed. The amount of time it takes the service to start the campaign depends on the number of listings in the campaign.<br><br><span class=\"tablenote\"><b>Note:</b> If the <b>startDate</b> has passed by the time the seller launches a campaign, the campaign will be updated to <code>RUNNING</code> status. If the seller launches a campaign before the <b>startDate</b>, the campaign will be updated to <code>SCHEDULED</code> status and will change to <code>RUNNING</code> status at the time of the specified <b>startDate</b>.</span>  # noqa: E501

        :param start_date: The start_date of this QuickSetupRequest.  # noqa: E501
        :type: str
        """

        self._start_date = start_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(QuickSetupRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QuickSetupRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
