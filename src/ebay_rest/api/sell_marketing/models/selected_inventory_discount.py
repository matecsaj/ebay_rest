# coding: utf-8

"""
    Marketing API

    <p>The <i>Marketing API </i> offers two platforms that sellers can use to promote and advertise their products:</p> <ul><li><b>Promoted Listings</b> is an eBay ad service that lets sellers set up <i>ad campaigns </i> for the products they want to promote. eBay displays the ads in search results and in other marketing modules as <b>SPONSORED</b> listings. If an item in a Promoted Listings campaign sells, the seller is assessed a Promoted Listings fee, which is a seller-specified percentage applied to the sales price. For complete details, refer to the <a href=\"/api-docs/sell/static/marketing/pl-landing.html\">Promoted Listings playbook</a>.</li><li><b>Promotions Manager</b> gives sellers a way to offer discounts on specific items as a way to attract buyers to their inventory. Sellers can set up discounts (such as \"20% off\" and other types of offers) on specific items or on an entire customer order. To further attract buyers, eBay prominently displays promotion <i>teasers</i> throughout buyer flows. For complete details, see <a href=\"/api-docs/sell/static/marketing/promotions-manager.html\">Promotions Manager</a>.</li></ul>  <p><b>Marketing reports</b>, on both the Promoted Listings and Promotions Manager platforms, give sellers information that shows the effectiveness of their marketing strategies. The data gives sellers the ability to review and fine tune their marketing efforts.</p><p><b>Store Email Campaign</b> allows sellers to create and send email campaigns to customers who have signed up to receive their newsletter. For more information on email campaigns, see <a href=\"/api-docs/sell/static/marketing/store-email-campaigns.html#email-campain-types\" target=\"_blank\">Store Email Campaigns</a>.<p class=\"tablenote\"><b>Important!</b> Sellers must have an active eBay Store subscription, and they must accept the <b>Terms and Conditions</b> before they can make requests to these APIs in the Production environment. There are also site-specific listings requirements and restrictions associated with these marketing tools, as listed in the \"requirements and restrictions\" sections for <a href=\"/api-docs/sell/marketing/static/overview.html#PL-requirements\">Promoted Listings</a> and <a href=\"/api-docs/sell/marketing/static/overview.html#PM-requirements\">Promotions Manager</a>.</p> <p>The table below lists all the Marketing API calls grouped by resource.</p>  # noqa: E501

    OpenAPI spec version: v1.22.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SelectedInventoryDiscount(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'discount_benefit': 'DiscountBenefit',
        'discount_id': 'str',
        'inventory_criterion': 'InventoryCriterion',
        'rule_order': 'int'
    }

    attribute_map = {
        'discount_benefit': 'discountBenefit',
        'discount_id': 'discountId',
        'inventory_criterion': 'inventoryCriterion',
        'rule_order': 'ruleOrder'
    }

    def __init__(self, discount_benefit=None, discount_id=None, inventory_criterion=None, rule_order=None):  # noqa: E501
        """SelectedInventoryDiscount - a model defined in Swagger"""  # noqa: E501
        self._discount_benefit = None
        self._discount_id = None
        self._inventory_criterion = None
        self._rule_order = None
        self.discriminator = None
        if discount_benefit is not None:
            self.discount_benefit = discount_benefit
        if discount_id is not None:
            self.discount_id = discount_id
        if inventory_criterion is not None:
            self.inventory_criterion = inventory_criterion
        if rule_order is not None:
            self.rule_order = rule_order

    @property
    def discount_benefit(self):
        """Gets the discount_benefit of this SelectedInventoryDiscount.  # noqa: E501


        :return: The discount_benefit of this SelectedInventoryDiscount.  # noqa: E501
        :rtype: DiscountBenefit
        """
        return self._discount_benefit

    @discount_benefit.setter
    def discount_benefit(self, discount_benefit):
        """Sets the discount_benefit of this SelectedInventoryDiscount.


        :param discount_benefit: The discount_benefit of this SelectedInventoryDiscount.  # noqa: E501
        :type: DiscountBenefit
        """

        self._discount_benefit = discount_benefit

    @property
    def discount_id(self):
        """Gets the discount_id of this SelectedInventoryDiscount.  # noqa: E501

        A unique, eBay-generated ID that you can use to identify the discount. This field is ignored in POST and PUT operations.  # noqa: E501

        :return: The discount_id of this SelectedInventoryDiscount.  # noqa: E501
        :rtype: str
        """
        return self._discount_id

    @discount_id.setter
    def discount_id(self, discount_id):
        """Sets the discount_id of this SelectedInventoryDiscount.

        A unique, eBay-generated ID that you can use to identify the discount. This field is ignored in POST and PUT operations.  # noqa: E501

        :param discount_id: The discount_id of this SelectedInventoryDiscount.  # noqa: E501
        :type: str
        """

        self._discount_id = discount_id

    @property
    def inventory_criterion(self):
        """Gets the inventory_criterion of this SelectedInventoryDiscount.  # noqa: E501


        :return: The inventory_criterion of this SelectedInventoryDiscount.  # noqa: E501
        :rtype: InventoryCriterion
        """
        return self._inventory_criterion

    @inventory_criterion.setter
    def inventory_criterion(self, inventory_criterion):
        """Sets the inventory_criterion of this SelectedInventoryDiscount.


        :param inventory_criterion: The inventory_criterion of this SelectedInventoryDiscount.  # noqa: E501
        :type: InventoryCriterion
        """

        self._inventory_criterion = inventory_criterion

    @property
    def rule_order(self):
        """Gets the rule_order of this SelectedInventoryDiscount.  # noqa: E501

        For markdown discounts, this field is reserved for future use. <!--This field specifies the precedence of this set of inventory criteria, which is taken into account if an item is selected for multiple discounts by different sets of criteria. The criteria with the highest priority (lowest ruleOrder value) takes precedence over criteria with a lower precedence.-->  # noqa: E501

        :return: The rule_order of this SelectedInventoryDiscount.  # noqa: E501
        :rtype: int
        """
        return self._rule_order

    @rule_order.setter
    def rule_order(self, rule_order):
        """Sets the rule_order of this SelectedInventoryDiscount.

        For markdown discounts, this field is reserved for future use. <!--This field specifies the precedence of this set of inventory criteria, which is taken into account if an item is selected for multiple discounts by different sets of criteria. The criteria with the highest priority (lowest ruleOrder value) takes precedence over criteria with a lower precedence.-->  # noqa: E501

        :param rule_order: The rule_order of this SelectedInventoryDiscount.  # noqa: E501
        :type: int
        """

        self._rule_order = rule_order

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SelectedInventoryDiscount, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SelectedInventoryDiscount):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
