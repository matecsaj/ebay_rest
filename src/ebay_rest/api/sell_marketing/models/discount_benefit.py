# coding: utf-8

"""
    Marketing API

    <p>The <i>Marketing API </i> offers two platforms that sellers can use to promote and advertise their products:</p> <ul><li><b>Promoted Listings</b> is an eBay ad service that lets sellers set up <i>ad campaigns </i> for the products they want to promote. eBay displays the ads in search results and in other marketing modules as <b>SPONSORED</b> listings. If an item in a Promoted Listings campaign sells, the seller is assessed a Promoted Listings fee, which is a seller-specified percentage applied to the sales price. For complete details, refer to the <a href=\"/api-docs/sell/static/marketing/pl-landing.html\">Promoted Listings playbook</a>.</li><li><b>Promotions Manager</b> gives sellers a way to offer discounts on specific items as a way to attract buyers to their inventory. Sellers can set up discounts (such as \"20% off\" and other types of offers) on specific items or on an entire customer order. To further attract buyers, eBay prominently displays promotion <i>teasers</i> throughout buyer flows. For complete details, see <a href=\"/api-docs/sell/static/marketing/promotions-manager.html\">Promotions Manager</a>.</li></ul>  <p><b>Marketing reports</b>, on both the Promoted Listings and Promotions Manager platforms, give sellers information that shows the effectiveness of their marketing strategies. The data gives sellers the ability to review and fine tune their marketing efforts.</p><p><b>Store Email Campaign</b> allows sellers to create and send email campaigns to customers who have signed up to receive their newsletter. For more information on email campaigns, see <a href=\"/api-docs/sell/static/marketing/store-email-campaigns.html#email-campain-types\" target=\"_blank\">Store Email Campaigns</a>.<p class=\"tablenote\"><b>Important!</b> Sellers must have an active eBay Store subscription, and they must accept the <b>Terms and Conditions</b> before they can make requests to these APIs in the Production environment. There are also site-specific listings requirements and restrictions associated with these marketing tools, as listed in the \"requirements and restrictions\" sections for <a href=\"/api-docs/sell/marketing/static/overview.html#PL-requirements\">Promoted Listings</a> and <a href=\"/api-docs/sell/marketing/static/overview.html#PM-requirements\">Promotions Manager</a>.</p> <p>The table below lists all the Marketing API calls grouped by resource.</p>  # noqa: E501

    OpenAPI spec version: v1.22.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DiscountBenefit(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amount_off_item': 'Amount',
        'amount_off_order': 'Amount',
        'percentage_off_item': 'str',
        'percentage_off_order': 'str'
    }

    attribute_map = {
        'amount_off_item': 'amountOffItem',
        'amount_off_order': 'amountOffOrder',
        'percentage_off_item': 'percentageOffItem',
        'percentage_off_order': 'percentageOffOrder'
    }

    def __init__(self, amount_off_item=None, amount_off_order=None, percentage_off_item=None, percentage_off_order=None):  # noqa: E501
        """DiscountBenefit - a model defined in Swagger"""  # noqa: E501
        self._amount_off_item = None
        self._amount_off_order = None
        self._percentage_off_item = None
        self._percentage_off_order = None
        self.discriminator = None
        if amount_off_item is not None:
            self.amount_off_item = amount_off_item
        if amount_off_order is not None:
            self.amount_off_order = amount_off_order
        if percentage_off_item is not None:
            self.percentage_off_item = percentage_off_item
        if percentage_off_order is not None:
            self.percentage_off_order = percentage_off_order

    @property
    def amount_off_item(self):
        """Gets the amount_off_item of this DiscountBenefit.  # noqa: E501


        :return: The amount_off_item of this DiscountBenefit.  # noqa: E501
        :rtype: Amount
        """
        return self._amount_off_item

    @amount_off_item.setter
    def amount_off_item(self, amount_off_item):
        """Sets the amount_off_item of this DiscountBenefit.


        :param amount_off_item: The amount_off_item of this DiscountBenefit.  # noqa: E501
        :type: Amount
        """

        self._amount_off_item = amount_off_item

    @property
    def amount_off_order(self):
        """Gets the amount_off_order of this DiscountBenefit.  # noqa: E501


        :return: The amount_off_order of this DiscountBenefit.  # noqa: E501
        :rtype: Amount
        """
        return self._amount_off_order

    @amount_off_order.setter
    def amount_off_order(self, amount_off_order):
        """Sets the amount_off_order of this DiscountBenefit.


        :param amount_off_order: The amount_off_order of this DiscountBenefit.  # noqa: E501
        :type: Amount
        """

        self._amount_off_order = amount_off_order

    @property
    def percentage_off_item(self):
        """Gets the percentage_off_item of this DiscountBenefit.  # noqa: E501

        The percentage applied to the sales price that is discounted off the discounted item (or items) when the discount criteria is met.  <br><br>Valid integer values for percentage off: &nbsp;&nbsp;<b>Min:</b> <code>5</code> &nbsp;&nbsp;<b>Max:</b> <code>80</code>  # noqa: E501

        :return: The percentage_off_item of this DiscountBenefit.  # noqa: E501
        :rtype: str
        """
        return self._percentage_off_item

    @percentage_off_item.setter
    def percentage_off_item(self, percentage_off_item):
        """Sets the percentage_off_item of this DiscountBenefit.

        The percentage applied to the sales price that is discounted off the discounted item (or items) when the discount criteria is met.  <br><br>Valid integer values for percentage off: &nbsp;&nbsp;<b>Min:</b> <code>5</code> &nbsp;&nbsp;<b>Max:</b> <code>80</code>  # noqa: E501

        :param percentage_off_item: The percentage_off_item of this DiscountBenefit.  # noqa: E501
        :type: str
        """

        self._percentage_off_item = percentage_off_item

    @property
    def percentage_off_order(self):
        """Gets the percentage_off_order of this DiscountBenefit.  # noqa: E501

        Used for threshold discounts, this is the percentage of the order price that is discounted off the order when the discount criteria is met. This field is not value for markdown discounts.  <br><br>Valid integer values for ORDER_DISCOUNT discounts: &nbsp;&nbsp;<b>Min:</b> <code>5</code> &nbsp;&nbsp;<b>Max:</b> <code>80</code>  <br><br>For VOLUME_DISCOUNT discounts: Must be set to <code>0</code> for the first discount rule.  # noqa: E501

        :return: The percentage_off_order of this DiscountBenefit.  # noqa: E501
        :rtype: str
        """
        return self._percentage_off_order

    @percentage_off_order.setter
    def percentage_off_order(self, percentage_off_order):
        """Sets the percentage_off_order of this DiscountBenefit.

        Used for threshold discounts, this is the percentage of the order price that is discounted off the order when the discount criteria is met. This field is not value for markdown discounts.  <br><br>Valid integer values for ORDER_DISCOUNT discounts: &nbsp;&nbsp;<b>Min:</b> <code>5</code> &nbsp;&nbsp;<b>Max:</b> <code>80</code>  <br><br>For VOLUME_DISCOUNT discounts: Must be set to <code>0</code> for the first discount rule.  # noqa: E501

        :param percentage_off_order: The percentage_off_order of this DiscountBenefit.  # noqa: E501
        :type: str
        """

        self._percentage_off_order = percentage_off_order

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DiscountBenefit, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DiscountBenefit):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
