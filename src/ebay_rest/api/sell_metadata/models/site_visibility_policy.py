# coding: utf-8

"""
    Metadata API

    The Metadata API has operations that retrieve configuration details pertaining to the different eBay marketplaces. In addition to marketplace information, the API also has operations that get information that helps sellers list items on eBay.  # noqa: E501

    OpenAPI spec version: v1.11.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SiteVisibilityPolicy(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'category_id': 'str',
        'category_tree_id': 'str',
        'cross_border_trade_australia_enabled': 'bool',
        'cross_border_trade_gb_enabled': 'bool',
        'cross_border_trade_north_america_enabled': 'bool'
    }

    attribute_map = {
        'category_id': 'categoryId',
        'category_tree_id': 'categoryTreeId',
        'cross_border_trade_australia_enabled': 'crossBorderTradeAustraliaEnabled',
        'cross_border_trade_gb_enabled': 'crossBorderTradeGBEnabled',
        'cross_border_trade_north_america_enabled': 'crossBorderTradeNorthAmericaEnabled'
    }

    def __init__(self, category_id=None, category_tree_id=None, cross_border_trade_australia_enabled=None, cross_border_trade_gb_enabled=None, cross_border_trade_north_america_enabled=None):  # noqa: E501
        """SiteVisibilityPolicy - a model defined in Swagger"""  # noqa: E501
        self._category_id = None
        self._category_tree_id = None
        self._cross_border_trade_australia_enabled = None
        self._cross_border_trade_gb_enabled = None
        self._cross_border_trade_north_america_enabled = None
        self.discriminator = None
        if category_id is not None:
            self.category_id = category_id
        if category_tree_id is not None:
            self.category_tree_id = category_tree_id
        if cross_border_trade_australia_enabled is not None:
            self.cross_border_trade_australia_enabled = cross_border_trade_australia_enabled
        if cross_border_trade_gb_enabled is not None:
            self.cross_border_trade_gb_enabled = cross_border_trade_gb_enabled
        if cross_border_trade_north_america_enabled is not None:
            self.cross_border_trade_north_america_enabled = cross_border_trade_north_america_enabled

    @property
    def category_id(self):
        """Gets the category_id of this SiteVisibilityPolicy.  # noqa: E501

        The unique identifier of the eBay leaf category for which metadata is being returned.  # noqa: E501

        :return: The category_id of this SiteVisibilityPolicy.  # noqa: E501
        :rtype: str
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this SiteVisibilityPolicy.

        The unique identifier of the eBay leaf category for which metadata is being returned.  # noqa: E501

        :param category_id: The category_id of this SiteVisibilityPolicy.  # noqa: E501
        :type: str
        """

        self._category_id = category_id

    @property
    def category_tree_id(self):
        """Gets the category_tree_id of this SiteVisibilityPolicy.  # noqa: E501

        The unique identifier of the category tree.  # noqa: E501

        :return: The category_tree_id of this SiteVisibilityPolicy.  # noqa: E501
        :rtype: str
        """
        return self._category_tree_id

    @category_tree_id.setter
    def category_tree_id(self, category_tree_id):
        """Sets the category_tree_id of this SiteVisibilityPolicy.

        The unique identifier of the category tree.  # noqa: E501

        :param category_tree_id: The category_tree_id of this SiteVisibilityPolicy.  # noqa: E501
        :type: str
        """

        self._category_tree_id = category_tree_id

    @property
    def cross_border_trade_australia_enabled(self):
        """Gets the cross_border_trade_australia_enabled of this SiteVisibilityPolicy.  # noqa: E501

        If <code>true</code>, the category supports specifying that listings of a seller on the UK marketplace can pass in Australia as a value in a <CrossBorderTrade> field to expose that item on the eBay Australia site (ebay.com.au). For more information, see <a href=\"/api-docs/user-guides/static/trading-user-guide/cross-border-trading.html\"  target=\"_blank\">Cross-border trading</a>.  # noqa: E501

        :return: The cross_border_trade_australia_enabled of this SiteVisibilityPolicy.  # noqa: E501
        :rtype: bool
        """
        return self._cross_border_trade_australia_enabled

    @cross_border_trade_australia_enabled.setter
    def cross_border_trade_australia_enabled(self, cross_border_trade_australia_enabled):
        """Sets the cross_border_trade_australia_enabled of this SiteVisibilityPolicy.

        If <code>true</code>, the category supports specifying that listings of a seller on the UK marketplace can pass in Australia as a value in a <CrossBorderTrade> field to expose that item on the eBay Australia site (ebay.com.au). For more information, see <a href=\"/api-docs/user-guides/static/trading-user-guide/cross-border-trading.html\"  target=\"_blank\">Cross-border trading</a>.  # noqa: E501

        :param cross_border_trade_australia_enabled: The cross_border_trade_australia_enabled of this SiteVisibilityPolicy.  # noqa: E501
        :type: bool
        """

        self._cross_border_trade_australia_enabled = cross_border_trade_australia_enabled

    @property
    def cross_border_trade_gb_enabled(self):
        """Gets the cross_border_trade_gb_enabled of this SiteVisibilityPolicy.  # noqa: E501

        If <code>true</code>, the category supports specifying that listings of a seller on the US or Canada merketplaces can pass in UK as a value in a <CrossBorderTrade> field to expose that item on the eBay UK (ebay.co.uk) and eBay IE (ebay.ie) sites. For more information, see <a href=\"/api-docs/user-guides/static/trading-user-guide/cross-border-trading.html\"  target=\"_blank\">Cross-border trading</a>.  # noqa: E501

        :return: The cross_border_trade_gb_enabled of this SiteVisibilityPolicy.  # noqa: E501
        :rtype: bool
        """
        return self._cross_border_trade_gb_enabled

    @cross_border_trade_gb_enabled.setter
    def cross_border_trade_gb_enabled(self, cross_border_trade_gb_enabled):
        """Sets the cross_border_trade_gb_enabled of this SiteVisibilityPolicy.

        If <code>true</code>, the category supports specifying that listings of a seller on the US or Canada merketplaces can pass in UK as a value in a <CrossBorderTrade> field to expose that item on the eBay UK (ebay.co.uk) and eBay IE (ebay.ie) sites. For more information, see <a href=\"/api-docs/user-guides/static/trading-user-guide/cross-border-trading.html\"  target=\"_blank\">Cross-border trading</a>.  # noqa: E501

        :param cross_border_trade_gb_enabled: The cross_border_trade_gb_enabled of this SiteVisibilityPolicy.  # noqa: E501
        :type: bool
        """

        self._cross_border_trade_gb_enabled = cross_border_trade_gb_enabled

    @property
    def cross_border_trade_north_america_enabled(self):
        """Gets the cross_border_trade_north_america_enabled of this SiteVisibilityPolicy.  # noqa: E501

        If <code>true</code>, the category supports specifying that listings of a seller on the US or Canada merketplaces can pass in North America as a value in a <CrossBorderTrade> field to expose that item on the eBay US (ebay.com) and eBay Canada (ebay.ca) sites (English). For more information, see <a href=\"/api-docs/user-guides/static/trading-user-guide/cross-border-trading.html\"  target=\"_blank\">Cross-border trading</a>.   # noqa: E501

        :return: The cross_border_trade_north_america_enabled of this SiteVisibilityPolicy.  # noqa: E501
        :rtype: bool
        """
        return self._cross_border_trade_north_america_enabled

    @cross_border_trade_north_america_enabled.setter
    def cross_border_trade_north_america_enabled(self, cross_border_trade_north_america_enabled):
        """Sets the cross_border_trade_north_america_enabled of this SiteVisibilityPolicy.

        If <code>true</code>, the category supports specifying that listings of a seller on the US or Canada merketplaces can pass in North America as a value in a <CrossBorderTrade> field to expose that item on the eBay US (ebay.com) and eBay Canada (ebay.ca) sites (English). For more information, see <a href=\"/api-docs/user-guides/static/trading-user-guide/cross-border-trading.html\"  target=\"_blank\">Cross-border trading</a>.   # noqa: E501

        :param cross_border_trade_north_america_enabled: The cross_border_trade_north_america_enabled of this SiteVisibilityPolicy.  # noqa: E501
        :type: bool
        """

        self._cross_border_trade_north_america_enabled = cross_border_trade_north_america_enabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SiteVisibilityPolicy, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SiteVisibilityPolicy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
