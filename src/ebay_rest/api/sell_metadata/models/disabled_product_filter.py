# coding: utf-8

"""
    Metadata API

    The Metadata API has operations that retrieve configuration details pertaining to the different eBay marketplaces. In addition to marketplace information, the API also has operations that get information that helps sellers list items on eBay.  # noqa: E501

    OpenAPI spec version: v1.11.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DisabledProductFilter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'exclude_for_ebay_reviews': 'bool',
        'exclude_for_ebay_selling': 'bool'
    }

    attribute_map = {
        'exclude_for_ebay_reviews': 'excludeForEbayReviews',
        'exclude_for_ebay_selling': 'excludeForEbaySelling'
    }

    def __init__(self, exclude_for_ebay_reviews=None, exclude_for_ebay_selling=None):  # noqa: E501
        """DisabledProductFilter - a model defined in Swagger"""  # noqa: E501
        self._exclude_for_ebay_reviews = None
        self._exclude_for_ebay_selling = None
        self.discriminator = None
        if exclude_for_ebay_reviews is not None:
            self.exclude_for_ebay_reviews = exclude_for_ebay_reviews
        if exclude_for_ebay_selling is not None:
            self.exclude_for_ebay_selling = exclude_for_ebay_selling

    @property
    def exclude_for_ebay_reviews(self):
        """Gets the exclude_for_ebay_reviews of this DisabledProductFilter.  # noqa: E501

        Specifies whether to filter out products excluded for eBay reviews.<br><br>If set to <code>true</code>, items excluded from eBay reviews are not returned.  # noqa: E501

        :return: The exclude_for_ebay_reviews of this DisabledProductFilter.  # noqa: E501
        :rtype: bool
        """
        return self._exclude_for_ebay_reviews

    @exclude_for_ebay_reviews.setter
    def exclude_for_ebay_reviews(self, exclude_for_ebay_reviews):
        """Sets the exclude_for_ebay_reviews of this DisabledProductFilter.

        Specifies whether to filter out products excluded for eBay reviews.<br><br>If set to <code>true</code>, items excluded from eBay reviews are not returned.  # noqa: E501

        :param exclude_for_ebay_reviews: The exclude_for_ebay_reviews of this DisabledProductFilter.  # noqa: E501
        :type: bool
        """

        self._exclude_for_ebay_reviews = exclude_for_ebay_reviews

    @property
    def exclude_for_ebay_selling(self):
        """Gets the exclude_for_ebay_selling of this DisabledProductFilter.  # noqa: E501

        Specifies whether to filter out products excluded for eBay selling.<br><br>If set to <code>true</code>, items excluded from eBay selling are not returned.  # noqa: E501

        :return: The exclude_for_ebay_selling of this DisabledProductFilter.  # noqa: E501
        :rtype: bool
        """
        return self._exclude_for_ebay_selling

    @exclude_for_ebay_selling.setter
    def exclude_for_ebay_selling(self, exclude_for_ebay_selling):
        """Sets the exclude_for_ebay_selling of this DisabledProductFilter.

        Specifies whether to filter out products excluded for eBay selling.<br><br>If set to <code>true</code>, items excluded from eBay selling are not returned.  # noqa: E501

        :param exclude_for_ebay_selling: The exclude_for_ebay_selling of this DisabledProductFilter.  # noqa: E501
        :type: bool
        """

        self._exclude_for_ebay_selling = exclude_for_ebay_selling

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DisabledProductFilter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DisabledProductFilter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
