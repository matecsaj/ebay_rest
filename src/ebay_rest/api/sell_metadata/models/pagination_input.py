# coding: utf-8

"""
    Metadata API

    The Metadata API has operations that retrieve configuration details pertaining to the different eBay marketplaces. In addition to marketplace information, the API also has operations that get information that helps sellers list items on eBay.  # noqa: E501

    OpenAPI spec version: v1.11.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PaginationInput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'limit': 'int',
        'offset': 'int'
    }

    attribute_map = {
        'limit': 'limit',
        'offset': 'offset'
    }

    def __init__(self, limit=None, offset=None):  # noqa: E501
        """PaginationInput - a model defined in Swagger"""  # noqa: E501
        self._limit = None
        self._offset = None
        self.discriminator = None
        if limit is not None:
            self.limit = limit
        if offset is not None:
            self.offset = offset

    @property
    def limit(self):
        """Gets the limit of this PaginationInput.  # noqa: E501

        The max number of items, from the current result set, returned on a single page.<br><br><span class=\"tablenote\"><b>Note:</b> For <b>getProductCompatibilities</b>, the max value is 100. If no <b>limit</b> is specified, this field defaults to the max value.</span>  # noqa: E501

        :return: The limit of this PaginationInput.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this PaginationInput.

        The max number of items, from the current result set, returned on a single page.<br><br><span class=\"tablenote\"><b>Note:</b> For <b>getProductCompatibilities</b>, the max value is 100. If no <b>limit</b> is specified, this field defaults to the max value.</span>  # noqa: E501

        :param limit: The limit of this PaginationInput.  # noqa: E501
        :type: int
        """

        self._limit = limit

    @property
    def offset(self):
        """Gets the offset of this PaginationInput.  # noqa: E501

        The number of items that will be skipped in the result set before returning the first item in the paginated response.<br><br>Combine <b>offset</b> with <b>limit</b> to control the items returned in the response. For example, if you supply an offset of 10 and a limit of 20, the first page of the response contains items 11-30 from the complete result set.<br><br><b>Default:</b> 0  # noqa: E501

        :return: The offset of this PaginationInput.  # noqa: E501
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this PaginationInput.

        The number of items that will be skipped in the result set before returning the first item in the paginated response.<br><br>Combine <b>offset</b> with <b>limit</b> to control the items returned in the response. For example, if you supply an offset of 10 and a limit of 20, the first page of the response contains items 11-30 from the complete result set.<br><br><b>Default:</b> 0  # noqa: E501

        :param offset: The offset of this PaginationInput.  # noqa: E501
        :type: int
        """

        self._offset = offset

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PaginationInput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaginationInput):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
