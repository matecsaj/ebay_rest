# coding: utf-8

"""
    Metadata API

    The Metadata API has operations that retrieve configuration details pertaining to the different eBay marketplaces. In addition to marketplace information, the API also has operations that get information that helps sellers list items on eBay.  # noqa: E501

    OpenAPI spec version: v1.11.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LocalListingDistance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'distances': 'list[int]',
        'distance_type': 'str'
    }

    attribute_map = {
        'distances': 'distances',
        'distance_type': 'distanceType'
    }

    def __init__(self, distances=None, distance_type=None):  # noqa: E501
        """LocalListingDistance - a model defined in Swagger"""  # noqa: E501
        self._distances = None
        self._distance_type = None
        self.discriminator = None
        if distances is not None:
            self.distances = distances
        if distance_type is not None:
            self.distance_type = distance_type

    @property
    def distances(self):
        """Gets the distances of this LocalListingDistance.  # noqa: E501

        This array indicates the radius (in miles) of the selling area for Local Market Vehicle listings.  # noqa: E501

        :return: The distances of this LocalListingDistance.  # noqa: E501
        :rtype: list[int]
        """
        return self._distances

    @distances.setter
    def distances(self, distances):
        """Sets the distances of this LocalListingDistance.

        This array indicates the radius (in miles) of the selling area for Local Market Vehicle listings.  # noqa: E501

        :param distances: The distances of this LocalListingDistance.  # noqa: E501
        :type: list[int]
        """

        self._distances = distances

    @property
    def distance_type(self):
        """Gets the distance_type of this LocalListingDistance.  # noqa: E501

        This enumerated value indicates the type of local listing distances, such as non-subscription or regular, for items listed by sellers. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/metadata/types/sel:DistanceType'>eBay API documentation</a>  # noqa: E501

        :return: The distance_type of this LocalListingDistance.  # noqa: E501
        :rtype: str
        """
        return self._distance_type

    @distance_type.setter
    def distance_type(self, distance_type):
        """Sets the distance_type of this LocalListingDistance.

        This enumerated value indicates the type of local listing distances, such as non-subscription or regular, for items listed by sellers. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/metadata/types/sel:DistanceType'>eBay API documentation</a>  # noqa: E501

        :param distance_type: The distance_type of this LocalListingDistance.  # noqa: E501
        :type: str
        """

        self._distance_type = distance_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LocalListingDistance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LocalListingDistance):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
