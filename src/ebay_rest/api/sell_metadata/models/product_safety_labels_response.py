# coding: utf-8

"""
    Metadata API

    The Metadata API has operations that retrieve configuration details pertaining to the different eBay marketplaces. In addition to marketplace information, the API also has operations that get information that helps sellers list items on eBay.  # noqa: E501

    OpenAPI spec version: v1.11.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProductSafetyLabelsResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'pictograms': 'list[ProductSafetyLabelPictogram]',
        'statements': 'list[ProductSafetyLabelStatement]'
    }

    attribute_map = {
        'pictograms': 'pictograms',
        'statements': 'statements'
    }

    def __init__(self, pictograms=None, statements=None):  # noqa: E501
        """ProductSafetyLabelsResponse - a model defined in Swagger"""  # noqa: E501
        self._pictograms = None
        self._statements = None
        self.discriminator = None
        if pictograms is not None:
            self.pictograms = pictograms
        if statements is not None:
            self.statements = statements

    @property
    def pictograms(self):
        """Gets the pictograms of this ProductSafetyLabelsResponse.  # noqa: E501

        This array contains a list of pictograms of product safety labels  for the specified marketplace.  # noqa: E501

        :return: The pictograms of this ProductSafetyLabelsResponse.  # noqa: E501
        :rtype: list[ProductSafetyLabelPictogram]
        """
        return self._pictograms

    @pictograms.setter
    def pictograms(self, pictograms):
        """Sets the pictograms of this ProductSafetyLabelsResponse.

        This array contains a list of pictograms of product safety labels  for the specified marketplace.  # noqa: E501

        :param pictograms: The pictograms of this ProductSafetyLabelsResponse.  # noqa: E501
        :type: list[ProductSafetyLabelPictogram]
        """

        self._pictograms = pictograms

    @property
    def statements(self):
        """Gets the statements of this ProductSafetyLabelsResponse.  # noqa: E501

        This array contains available product safety labels statements for the specified marketplace.   # noqa: E501

        :return: The statements of this ProductSafetyLabelsResponse.  # noqa: E501
        :rtype: list[ProductSafetyLabelStatement]
        """
        return self._statements

    @statements.setter
    def statements(self, statements):
        """Sets the statements of this ProductSafetyLabelsResponse.

        This array contains available product safety labels statements for the specified marketplace.   # noqa: E501

        :param statements: The statements of this ProductSafetyLabelsResponse.  # noqa: E501
        :type: list[ProductSafetyLabelStatement]
        """

        self._statements = statements

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProductSafetyLabelsResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductSafetyLabelsResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
