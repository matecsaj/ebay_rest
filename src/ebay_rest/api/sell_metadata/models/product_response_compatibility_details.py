# coding: utf-8

"""
    Metadata API

    The Metadata API has operations that retrieve configuration details pertaining to the different eBay marketplaces. In addition to marketplace information, the API also has operations that get information that helps sellers list items on eBay.  # noqa: E501

    OpenAPI spec version: v1.11.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProductResponseCompatibilityDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'note_details': 'list[PropertyFilterInner]',
        'product_details': 'list[PropertyValues]'
    }

    attribute_map = {
        'note_details': 'noteDetails',
        'product_details': 'productDetails'
    }

    def __init__(self, note_details=None, product_details=None):  # noqa: E501
        """ProductResponseCompatibilityDetails - a model defined in Swagger"""  # noqa: E501
        self._note_details = None
        self._product_details = None
        self.discriminator = None
        if note_details is not None:
            self.note_details = note_details
        if product_details is not None:
            self.product_details = product_details

    @property
    def note_details(self):
        """Gets the note_details of this ProductResponseCompatibilityDetails.  # noqa: E501

        This array returns additional comments about the corresponding product in the form of name-value pairs.  # noqa: E501

        :return: The note_details of this ProductResponseCompatibilityDetails.  # noqa: E501
        :rtype: list[PropertyFilterInner]
        """
        return self._note_details

    @note_details.setter
    def note_details(self, note_details):
        """Sets the note_details of this ProductResponseCompatibilityDetails.

        This array returns additional comments about the corresponding product in the form of name-value pairs.  # noqa: E501

        :param note_details: The note_details of this ProductResponseCompatibilityDetails.  # noqa: E501
        :type: list[PropertyFilterInner]
        """

        self._note_details = note_details

    @property
    def product_details(self):
        """Gets the product_details of this ProductResponseCompatibilityDetails.  # noqa: E501

        This array returns details about the product in the form of name-value pairs.   # noqa: E501

        :return: The product_details of this ProductResponseCompatibilityDetails.  # noqa: E501
        :rtype: list[PropertyValues]
        """
        return self._product_details

    @product_details.setter
    def product_details(self, product_details):
        """Sets the product_details of this ProductResponseCompatibilityDetails.

        This array returns details about the product in the form of name-value pairs.   # noqa: E501

        :param product_details: The product_details of this ProductResponseCompatibilityDetails.  # noqa: E501
        :type: list[PropertyValues]
        """

        self._product_details = product_details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProductResponseCompatibilityDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductResponseCompatibilityDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
