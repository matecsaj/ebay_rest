# coding: utf-8

"""
    Metadata API

    The Metadata API has operations that retrieve configuration details pertaining to the different eBay marketplaces. In addition to marketplace information, the API also has operations that get information that helps sellers list items on eBay.  # noqa: E501

    OpenAPI spec version: v1.11.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PropertyNamesResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'category_id': 'str',
        'properties': 'list[PropertyNamesResponseProperties]'
    }

    attribute_map = {
        'category_id': 'categoryId',
        'properties': 'properties'
    }

    def __init__(self, category_id=None, properties=None):  # noqa: E501
        """PropertyNamesResponse - a model defined in Swagger"""  # noqa: E501
        self._category_id = None
        self._properties = None
        self.discriminator = None
        if category_id is not None:
            self.category_id = category_id
        if properties is not None:
            self.properties = properties

    @property
    def category_id(self):
        """Gets the category_id of this PropertyNamesResponse.  # noqa: E501

        The unique identifier of the eBay category specified in the request.  # noqa: E501

        :return: The category_id of this PropertyNamesResponse.  # noqa: E501
        :rtype: str
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this PropertyNamesResponse.

        The unique identifier of the eBay category specified in the request.  # noqa: E501

        :param category_id: The category_id of this PropertyNamesResponse.  # noqa: E501
        :type: str
        """

        self._category_id = category_id

    @property
    def properties(self):
        """Gets the properties of this PropertyNamesResponse.  # noqa: E501

        This array contains all of the properties for the specified category.  # noqa: E501

        :return: The properties of this PropertyNamesResponse.  # noqa: E501
        :rtype: list[PropertyNamesResponseProperties]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this PropertyNamesResponse.

        This array contains all of the properties for the specified category.  # noqa: E501

        :param properties: The properties of this PropertyNamesResponse.  # noqa: E501
        :type: list[PropertyNamesResponseProperties]
        """

        self._properties = properties

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PropertyNamesResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PropertyNamesResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
