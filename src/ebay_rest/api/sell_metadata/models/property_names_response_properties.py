# coding: utf-8

"""
    Metadata API

    The Metadata API has operations that retrieve configuration details pertaining to the different eBay marketplaces. In addition to marketplace information, the API also has operations that get information that helps sellers list items on eBay.  # noqa: E501

    OpenAPI spec version: v1.11.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PropertyNamesResponseProperties(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dataset': 'str',
        'property_names': 'list[PropertyNamesResponsePropertyNames]'
    }

    attribute_map = {
        'dataset': 'dataset',
        'property_names': 'propertyNames'
    }

    def __init__(self, dataset=None, property_names=None):  # noqa: E501
        """PropertyNamesResponseProperties - a model defined in Swagger"""  # noqa: E501
        self._dataset = None
        self._property_names = None
        self.discriminator = None
        if dataset is not None:
            self.dataset = dataset
        if property_names is not None:
            self.property_names = property_names

    @property
    def dataset(self):
        """Gets the dataset of this PropertyNamesResponseProperties.  # noqa: E501

        This field defines the types of properties are returned for the specified catalog-enabled category.<br><br><b>Valid values:</b><ul><li><code>DisplayableProductDetails</code>: Properties for use in a user interface to describe products.</li><li><code>DisplayableSearchResults</code>: Properties for use in results for product searches.</li><li><code>Searchable</code>: Properties for use in searches.</li><li><code>Sortable</code>: Properties that are suitable for sorting.</li></ul>  # noqa: E501

        :return: The dataset of this PropertyNamesResponseProperties.  # noqa: E501
        :rtype: str
        """
        return self._dataset

    @dataset.setter
    def dataset(self, dataset):
        """Sets the dataset of this PropertyNamesResponseProperties.

        This field defines the types of properties are returned for the specified catalog-enabled category.<br><br><b>Valid values:</b><ul><li><code>DisplayableProductDetails</code>: Properties for use in a user interface to describe products.</li><li><code>DisplayableSearchResults</code>: Properties for use in results for product searches.</li><li><code>Searchable</code>: Properties for use in searches.</li><li><code>Sortable</code>: Properties that are suitable for sorting.</li></ul>  # noqa: E501

        :param dataset: The dataset of this PropertyNamesResponseProperties.  # noqa: E501
        :type: str
        """

        self._dataset = dataset

    @property
    def property_names(self):
        """Gets the property_names of this PropertyNamesResponseProperties.  # noqa: E501

        This array specifies the names of the properties associated with the specified category in the specified marketplace.<br><br>For example, typical vehicle property names are 'Make', 'Model', 'Year', 'Engine', and 'Trim', but will vary based on the eBay marketplace and the eBay category.  # noqa: E501

        :return: The property_names of this PropertyNamesResponseProperties.  # noqa: E501
        :rtype: list[PropertyNamesResponsePropertyNames]
        """
        return self._property_names

    @property_names.setter
    def property_names(self, property_names):
        """Sets the property_names of this PropertyNamesResponseProperties.

        This array specifies the names of the properties associated with the specified category in the specified marketplace.<br><br>For example, typical vehicle property names are 'Make', 'Model', 'Year', 'Engine', and 'Trim', but will vary based on the eBay marketplace and the eBay category.  # noqa: E501

        :param property_names: The property_names of this PropertyNamesResponseProperties.  # noqa: E501
        :type: list[PropertyNamesResponsePropertyNames]
        """

        self._property_names = property_names

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PropertyNamesResponseProperties, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PropertyNamesResponseProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
