# coding: utf-8

"""
    Metadata API

    The Metadata API has operations that retrieve configuration details pertaining to the different eBay marketplaces. In addition to marketplace information, the API also has operations that get information that helps sellers list items on eBay.  # noqa: E501

    OpenAPI spec version: v1.11.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ItemConditionDescriptorValueConstraint(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'applicable_to_condition_descriptor_id': 'str',
        'applicable_to_condition_descriptor_value_ids': 'list[str]'
    }

    attribute_map = {
        'applicable_to_condition_descriptor_id': 'applicableToConditionDescriptorId',
        'applicable_to_condition_descriptor_value_ids': 'applicableToConditionDescriptorValueIds'
    }

    def __init__(self, applicable_to_condition_descriptor_id=None, applicable_to_condition_descriptor_value_ids=None):  # noqa: E501
        """ItemConditionDescriptorValueConstraint - a model defined in Swagger"""  # noqa: E501
        self._applicable_to_condition_descriptor_id = None
        self._applicable_to_condition_descriptor_value_ids = None
        self.discriminator = None
        if applicable_to_condition_descriptor_id is not None:
            self.applicable_to_condition_descriptor_id = applicable_to_condition_descriptor_id
        if applicable_to_condition_descriptor_value_ids is not None:
            self.applicable_to_condition_descriptor_value_ids = applicable_to_condition_descriptor_value_ids

    @property
    def applicable_to_condition_descriptor_id(self):
        """Gets the applicable_to_condition_descriptor_id of this ItemConditionDescriptorValueConstraint.  # noqa: E501

        This string is returned if the corresponding condition descriptor value requires an associated condition descriptor that must also be specified in a listing. The condition descriptor ID for the associated condition descriptors is returned here.  # noqa: E501

        :return: The applicable_to_condition_descriptor_id of this ItemConditionDescriptorValueConstraint.  # noqa: E501
        :rtype: str
        """
        return self._applicable_to_condition_descriptor_id

    @applicable_to_condition_descriptor_id.setter
    def applicable_to_condition_descriptor_id(self, applicable_to_condition_descriptor_id):
        """Sets the applicable_to_condition_descriptor_id of this ItemConditionDescriptorValueConstraint.

        This string is returned if the corresponding condition descriptor value requires an associated condition descriptor that must also be specified in a listing. The condition descriptor ID for the associated condition descriptors is returned here.  # noqa: E501

        :param applicable_to_condition_descriptor_id: The applicable_to_condition_descriptor_id of this ItemConditionDescriptorValueConstraint.  # noqa: E501
        :type: str
        """

        self._applicable_to_condition_descriptor_id = applicable_to_condition_descriptor_id

    @property
    def applicable_to_condition_descriptor_value_ids(self):
        """Gets the applicable_to_condition_descriptor_value_ids of this ItemConditionDescriptorValueConstraint.  # noqa: E501

        This array is returned if the corresponding condition descriptor value is required for one or more associated condition descriptor values that must also be specified in a listing. The condition descriptor values IDs for the associated condition descriptor values are returned here.  # noqa: E501

        :return: The applicable_to_condition_descriptor_value_ids of this ItemConditionDescriptorValueConstraint.  # noqa: E501
        :rtype: list[str]
        """
        return self._applicable_to_condition_descriptor_value_ids

    @applicable_to_condition_descriptor_value_ids.setter
    def applicable_to_condition_descriptor_value_ids(self, applicable_to_condition_descriptor_value_ids):
        """Sets the applicable_to_condition_descriptor_value_ids of this ItemConditionDescriptorValueConstraint.

        This array is returned if the corresponding condition descriptor value is required for one or more associated condition descriptor values that must also be specified in a listing. The condition descriptor values IDs for the associated condition descriptor values are returned here.  # noqa: E501

        :param applicable_to_condition_descriptor_value_ids: The applicable_to_condition_descriptor_value_ids of this ItemConditionDescriptorValueConstraint.  # noqa: E501
        :type: list[str]
        """

        self._applicable_to_condition_descriptor_value_ids = applicable_to_condition_descriptor_value_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ItemConditionDescriptorValueConstraint, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ItemConditionDescriptorValueConstraint):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
