# coding: utf-8

"""
    Metadata API

    The Metadata API has operations that retrieve configuration details pertaining to the different eBay marketplaces. In addition to marketplace information, the API also has operations that get information that helps sellers list items on eBay.  # noqa: E501

    OpenAPI spec version: v1.11.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SignalWord(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'signal_word_id': 'str',
        'signal_word_description': 'str'
    }

    attribute_map = {
        'signal_word_id': 'signalWordId',
        'signal_word_description': 'signalWordDescription'
    }

    def __init__(self, signal_word_id=None, signal_word_description=None):  # noqa: E501
        """SignalWord - a model defined in Swagger"""  # noqa: E501
        self._signal_word_id = None
        self._signal_word_description = None
        self.discriminator = None
        if signal_word_id is not None:
            self.signal_word_id = signal_word_id
        if signal_word_description is not None:
            self.signal_word_description = signal_word_description

    @property
    def signal_word_id(self):
        """Gets the signal_word_id of this SignalWord.  # noqa: E501

        The identifier of the signal word. For more information, see <a href='/api-docs/sell/static/metadata/feature-regulatorhazmatcontainer.html#Signal'>Signal word information</a>.  # noqa: E501

        :return: The signal_word_id of this SignalWord.  # noqa: E501
        :rtype: str
        """
        return self._signal_word_id

    @signal_word_id.setter
    def signal_word_id(self, signal_word_id):
        """Sets the signal_word_id of this SignalWord.

        The identifier of the signal word. For more information, see <a href='/api-docs/sell/static/metadata/feature-regulatorhazmatcontainer.html#Signal'>Signal word information</a>.  # noqa: E501

        :param signal_word_id: The signal_word_id of this SignalWord.  # noqa: E501
        :type: str
        """

        self._signal_word_id = signal_word_id

    @property
    def signal_word_description(self):
        """Gets the signal_word_description of this SignalWord.  # noqa: E501

        The description of the signal word localized to the default language of the marketplace. For more information, see <a href='/api-docs/sell/static/metadata/feature-regulatorhazmatcontainer.html#Signal'>Signal word information</a>.  # noqa: E501

        :return: The signal_word_description of this SignalWord.  # noqa: E501
        :rtype: str
        """
        return self._signal_word_description

    @signal_word_description.setter
    def signal_word_description(self, signal_word_description):
        """Sets the signal_word_description of this SignalWord.

        The description of the signal word localized to the default language of the marketplace. For more information, see <a href='/api-docs/sell/static/metadata/feature-regulatorhazmatcontainer.html#Signal'>Signal word information</a>.  # noqa: E501

        :param signal_word_description: The signal_word_description of this SignalWord.  # noqa: E501
        :type: str
        """

        self._signal_word_description = signal_word_description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SignalWord, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SignalWord):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
