# coding: utf-8

"""
    Metadata API

    The Metadata API has operations that retrieve configuration details pertaining to the different eBay marketplaces. In addition to marketplace information, the API also has operations that get information that helps sellers list items on eBay.  # noqa: E501

    OpenAPI spec version: v1.11.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MultiCompatibilityPropertyValuesResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'compatibilities': 'list[Compatibility]',
        'metadata_version': 'str'
    }

    attribute_map = {
        'compatibilities': 'compatibilities',
        'metadata_version': 'metadataVersion'
    }

    def __init__(self, compatibilities=None, metadata_version=None):  # noqa: E501
        """MultiCompatibilityPropertyValuesResponse - a model defined in Swagger"""  # noqa: E501
        self._compatibilities = None
        self._metadata_version = None
        self.discriminator = None
        if compatibilities is not None:
            self.compatibilities = compatibilities
        if metadata_version is not None:
            self.metadata_version = metadata_version

    @property
    def compatibilities(self):
        """Gets the compatibilities of this MultiCompatibilityPropertyValuesResponse.  # noqa: E501

        This container defines the compatibility details associated with the specified property name value(s).  # noqa: E501

        :return: The compatibilities of this MultiCompatibilityPropertyValuesResponse.  # noqa: E501
        :rtype: list[Compatibility]
        """
        return self._compatibilities

    @compatibilities.setter
    def compatibilities(self, compatibilities):
        """Sets the compatibilities of this MultiCompatibilityPropertyValuesResponse.

        This container defines the compatibility details associated with the specified property name value(s).  # noqa: E501

        :param compatibilities: The compatibilities of this MultiCompatibilityPropertyValuesResponse.  # noqa: E501
        :type: list[Compatibility]
        """

        self._compatibilities = compatibilities

    @property
    def metadata_version(self):
        """Gets the metadata_version of this MultiCompatibilityPropertyValuesResponse.  # noqa: E501

        The version number of the metadata. This version is upticked whenever there are compatibility name changes for the specified marketplace.  # noqa: E501

        :return: The metadata_version of this MultiCompatibilityPropertyValuesResponse.  # noqa: E501
        :rtype: str
        """
        return self._metadata_version

    @metadata_version.setter
    def metadata_version(self, metadata_version):
        """Sets the metadata_version of this MultiCompatibilityPropertyValuesResponse.

        The version number of the metadata. This version is upticked whenever there are compatibility name changes for the specified marketplace.  # noqa: E501

        :param metadata_version: The metadata_version of this MultiCompatibilityPropertyValuesResponse.  # noqa: E501
        :type: str
        """

        self._metadata_version = metadata_version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MultiCompatibilityPropertyValuesResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MultiCompatibilityPropertyValuesResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
