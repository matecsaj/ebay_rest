# coding: utf-8

"""
    Metadata API

    The Metadata API has operations that retrieve configuration details pertaining to the different eBay marketplaces. In addition to marketplace information, the API also has operations that get information that helps sellers list items on eBay.  # noqa: E501

    OpenAPI spec version: v1.11.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MultiCompatibilityPropertyValuesRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'category_id': 'str',
        'property_filters': 'list[PropertyFilterInner]',
        'property_names': 'list[str]'
    }

    attribute_map = {
        'category_id': 'categoryId',
        'property_filters': 'propertyFilters',
        'property_names': 'propertyNames'
    }

    def __init__(self, category_id=None, property_filters=None, property_names=None):  # noqa: E501
        """MultiCompatibilityPropertyValuesRequest - a model defined in Swagger"""  # noqa: E501
        self._category_id = None
        self._property_filters = None
        self._property_names = None
        self.discriminator = None
        if category_id is not None:
            self.category_id = category_id
        if property_filters is not None:
            self.property_filters = property_filters
        if property_names is not None:
            self.property_names = property_names

    @property
    def category_id(self):
        """Gets the category_id of this MultiCompatibilityPropertyValuesRequest.  # noqa: E501

        The unique identifier of the eBay leaf category for which to retrieve property values.<br><br>Use the <a href=\"/api-docs/sell/metadata/resources/marketplace/methods/getAutomotivePartsCompatibilityPolicies\" target=\"_blank \">getAutomotivePartsCompatibilityPolicies</a> method to retrieve a list of categories that support parts compatibility.  # noqa: E501

        :return: The category_id of this MultiCompatibilityPropertyValuesRequest.  # noqa: E501
        :rtype: str
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this MultiCompatibilityPropertyValuesRequest.

        The unique identifier of the eBay leaf category for which to retrieve property values.<br><br>Use the <a href=\"/api-docs/sell/metadata/resources/marketplace/methods/getAutomotivePartsCompatibilityPolicies\" target=\"_blank \">getAutomotivePartsCompatibilityPolicies</a> method to retrieve a list of categories that support parts compatibility.  # noqa: E501

        :param category_id: The category_id of this MultiCompatibilityPropertyValuesRequest.  # noqa: E501
        :type: str
        """

        self._category_id = category_id

    @property
    def property_filters(self):
        """Gets the property_filters of this MultiCompatibilityPropertyValuesRequest.  # noqa: E501

        This array can be used to specify the compatibility properties used to limit the result set. Only values associated with the specified name-value pairs will be returned in the response.<br><br>For example, if the <b>propertyName</b> is set to <code>Year</code> and the <b>propertyValue</b> is set to <code>2022</code>, only compatible vehicles from 2022 will be returned.<br><br>At least one property name-value pair must be used.  # noqa: E501

        :return: The property_filters of this MultiCompatibilityPropertyValuesRequest.  # noqa: E501
        :rtype: list[PropertyFilterInner]
        """
        return self._property_filters

    @property_filters.setter
    def property_filters(self, property_filters):
        """Sets the property_filters of this MultiCompatibilityPropertyValuesRequest.

        This array can be used to specify the compatibility properties used to limit the result set. Only values associated with the specified name-value pairs will be returned in the response.<br><br>For example, if the <b>propertyName</b> is set to <code>Year</code> and the <b>propertyValue</b> is set to <code>2022</code>, only compatible vehicles from 2022 will be returned.<br><br>At least one property name-value pair must be used.  # noqa: E501

        :param property_filters: The property_filters of this MultiCompatibilityPropertyValuesRequest.  # noqa: E501
        :type: list[PropertyFilterInner]
        """

        self._property_filters = property_filters

    @property
    def property_names(self):
        """Gets the property_names of this MultiCompatibilityPropertyValuesRequest.  # noqa: E501

        This comma-delimited array specifies the names of the properties for which to retrieve associated property values.<br><br>For example, typical vehicle property names are 'Make', 'Model', 'Year', 'Engine', and 'Trim', but will vary based on the eBay marketplace and the eBay category.  # noqa: E501

        :return: The property_names of this MultiCompatibilityPropertyValuesRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._property_names

    @property_names.setter
    def property_names(self, property_names):
        """Sets the property_names of this MultiCompatibilityPropertyValuesRequest.

        This comma-delimited array specifies the names of the properties for which to retrieve associated property values.<br><br>For example, typical vehicle property names are 'Make', 'Model', 'Year', 'Engine', and 'Trim', but will vary based on the eBay marketplace and the eBay category.  # noqa: E501

        :param property_names: The property_names of this MultiCompatibilityPropertyValuesRequest.  # noqa: E501
        :type: list[str]
        """

        self._property_names = property_names

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MultiCompatibilityPropertyValuesRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MultiCompatibilityPropertyValuesRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
