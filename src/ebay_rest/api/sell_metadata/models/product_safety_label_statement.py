# coding: utf-8

"""
    Metadata API

    The Metadata API has operations that retrieve configuration details pertaining to the different eBay marketplaces. In addition to marketplace information, the API also has operations that get information that helps sellers list items on eBay.  # noqa: E501

    OpenAPI spec version: v1.11.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProductSafetyLabelStatement(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'statement_description': 'str',
        'statement_id': 'str'
    }

    attribute_map = {
        'statement_description': 'statementDescription',
        'statement_id': 'statementId'
    }

    def __init__(self, statement_description=None, statement_id=None):  # noqa: E501
        """ProductSafetyLabelStatement - a model defined in Swagger"""  # noqa: E501
        self._statement_description = None
        self._statement_id = None
        self.discriminator = None
        if statement_description is not None:
            self.statement_description = statement_description
        if statement_id is not None:
            self.statement_id = statement_id

    @property
    def statement_description(self):
        """Gets the statement_description of this ProductSafetyLabelStatement.  # noqa: E501

        The description of the statement localized to the default language of the marketplace.   # noqa: E501

        :return: The statement_description of this ProductSafetyLabelStatement.  # noqa: E501
        :rtype: str
        """
        return self._statement_description

    @statement_description.setter
    def statement_description(self, statement_description):
        """Sets the statement_description of this ProductSafetyLabelStatement.

        The description of the statement localized to the default language of the marketplace.   # noqa: E501

        :param statement_description: The statement_description of this ProductSafetyLabelStatement.  # noqa: E501
        :type: str
        """

        self._statement_description = statement_description

    @property
    def statement_id(self):
        """Gets the statement_id of this ProductSafetyLabelStatement.  # noqa: E501

        The identifier of the statement.  # noqa: E501

        :return: The statement_id of this ProductSafetyLabelStatement.  # noqa: E501
        :rtype: str
        """
        return self._statement_id

    @statement_id.setter
    def statement_id(self, statement_id):
        """Sets the statement_id of this ProductSafetyLabelStatement.

        The identifier of the statement.  # noqa: E501

        :param statement_id: The statement_id of this ProductSafetyLabelStatement.  # noqa: E501
        :type: str
        """

        self._statement_id = statement_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProductSafetyLabelStatement, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductSafetyLabelStatement):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
