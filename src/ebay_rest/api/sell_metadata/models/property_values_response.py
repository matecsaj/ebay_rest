# coding: utf-8

"""
    Metadata API

    The Metadata API has operations that retrieve configuration details pertaining to the different eBay marketplaces. In addition to marketplace information, the API also has operations that get information that helps sellers list items on eBay.  # noqa: E501

    OpenAPI spec version: v1.11.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PropertyValuesResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'metadata_version': 'str',
        'property_name': 'str',
        'property_values': 'list[str]'
    }

    attribute_map = {
        'metadata_version': 'metadataVersion',
        'property_name': 'propertyName',
        'property_values': 'propertyValues'
    }

    def __init__(self, metadata_version=None, property_name=None, property_values=None):  # noqa: E501
        """PropertyValuesResponse - a model defined in Swagger"""  # noqa: E501
        self._metadata_version = None
        self._property_name = None
        self._property_values = None
        self.discriminator = None
        if metadata_version is not None:
            self.metadata_version = metadata_version
        if property_name is not None:
            self.property_name = property_name
        if property_values is not None:
            self.property_values = property_values

    @property
    def metadata_version(self):
        """Gets the metadata_version of this PropertyValuesResponse.  # noqa: E501

        The version number of the metadata. This version is upticked whenever there are compatibility name changes for the specified marketplace.  # noqa: E501

        :return: The metadata_version of this PropertyValuesResponse.  # noqa: E501
        :rtype: str
        """
        return self._metadata_version

    @metadata_version.setter
    def metadata_version(self, metadata_version):
        """Sets the metadata_version of this PropertyValuesResponse.

        The version number of the metadata. This version is upticked whenever there are compatibility name changes for the specified marketplace.  # noqa: E501

        :param metadata_version: The metadata_version of this PropertyValuesResponse.  # noqa: E501
        :type: str
        """

        self._metadata_version = metadata_version

    @property
    def property_name(self):
        """Gets the property_name of this PropertyValuesResponse.  # noqa: E501

        The name of the property specified in the request.  # noqa: E501

        :return: The property_name of this PropertyValuesResponse.  # noqa: E501
        :rtype: str
        """
        return self._property_name

    @property_name.setter
    def property_name(self, property_name):
        """Sets the property_name of this PropertyValuesResponse.

        The name of the property specified in the request.  # noqa: E501

        :param property_name: The property_name of this PropertyValuesResponse.  # noqa: E501
        :type: str
        """

        self._property_name = property_name

    @property
    def property_values(self):
        """Gets the property_values of this PropertyValuesResponse.  # noqa: E501

        This array specifies the property values associated with the specified <b>propertyName</b>, in the specified category.  # noqa: E501

        :return: The property_values of this PropertyValuesResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._property_values

    @property_values.setter
    def property_values(self, property_values):
        """Sets the property_values of this PropertyValuesResponse.

        This array specifies the property values associated with the specified <b>propertyName</b>, in the specified category.  # noqa: E501

        :param property_values: The property_values of this PropertyValuesResponse.  # noqa: E501
        :type: list[str]
        """

        self._property_values = property_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PropertyValuesResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PropertyValuesResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
