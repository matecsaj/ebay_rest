# coding: utf-8

"""
    Metadata API

    The Metadata API has operations that retrieve configuration details pertaining to the different eBay marketplaces. In addition to marketplace information, the API also has operations that get information that helps sellers list items on eBay.  # noqa: E501

    OpenAPI spec version: v1.11.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PropertyFilterInner(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'property_name': 'str',
        'property_value': 'str',
        'unit_of_measurement': 'str',
        'url': 'str'
    }

    attribute_map = {
        'property_name': 'propertyName',
        'property_value': 'propertyValue',
        'unit_of_measurement': 'unitOfMeasurement',
        'url': 'url'
    }

    def __init__(self, property_name=None, property_value=None, unit_of_measurement=None, url=None):  # noqa: E501
        """PropertyFilterInner - a model defined in Swagger"""  # noqa: E501
        self._property_name = None
        self._property_value = None
        self._unit_of_measurement = None
        self._url = None
        self.discriminator = None
        if property_name is not None:
            self.property_name = property_name
        if property_value is not None:
            self.property_value = property_value
        if unit_of_measurement is not None:
            self.unit_of_measurement = unit_of_measurement
        if url is not None:
            self.url = url

    @property
    def property_name(self):
        """Gets the property_name of this PropertyFilterInner.  # noqa: E501

        The name of the property being described.<br><br>For example, typical vehicle property names are 'Make', 'Model', 'Year', 'Engine', and 'Trim', but will vary based on the eBay marketplace and the eBay category. Use the <a href=\"/api-docs/sell/metadata/resources/compatibilities/methods/getCompatibilityPropertyNames\" target=\"_blank \">getCompatibilityPropertyNames</a> method to retrieve valid property names for a specified category.  # noqa: E501

        :return: The property_name of this PropertyFilterInner.  # noqa: E501
        :rtype: str
        """
        return self._property_name

    @property_name.setter
    def property_name(self, property_name):
        """Sets the property_name of this PropertyFilterInner.

        The name of the property being described.<br><br>For example, typical vehicle property names are 'Make', 'Model', 'Year', 'Engine', and 'Trim', but will vary based on the eBay marketplace and the eBay category. Use the <a href=\"/api-docs/sell/metadata/resources/compatibilities/methods/getCompatibilityPropertyNames\" target=\"_blank \">getCompatibilityPropertyNames</a> method to retrieve valid property names for a specified category.  # noqa: E501

        :param property_name: The property_name of this PropertyFilterInner.  # noqa: E501
        :type: str
        """

        self._property_name = property_name

    @property
    def property_value(self):
        """Gets the property_value of this PropertyFilterInner.  # noqa: E501

        The value for the property specified in the <b>properyName</b> field.<br><br>For example, if the <b>propertyName</b> is <code>Make</code>, then the <b>propertyValue</b> will be the specific make of the vehicle, such as <code>Toyota</code>. Use the <a href=\"/api-docs/sell/metadata/resources/compatibilities/methods/getCompatibilityPropertyValues\" target=\"_blank \">getCompatibilityPropertyValues</a> to retreive valid property values associated with a specified property name.  # noqa: E501

        :return: The property_value of this PropertyFilterInner.  # noqa: E501
        :rtype: str
        """
        return self._property_value

    @property_value.setter
    def property_value(self, property_value):
        """Sets the property_value of this PropertyFilterInner.

        The value for the property specified in the <b>properyName</b> field.<br><br>For example, if the <b>propertyName</b> is <code>Make</code>, then the <b>propertyValue</b> will be the specific make of the vehicle, such as <code>Toyota</code>. Use the <a href=\"/api-docs/sell/metadata/resources/compatibilities/methods/getCompatibilityPropertyValues\" target=\"_blank \">getCompatibilityPropertyValues</a> to retreive valid property values associated with a specified property name.  # noqa: E501

        :param property_value: The property_value of this PropertyFilterInner.  # noqa: E501
        :type: str
        """

        self._property_value = property_value

    @property
    def unit_of_measurement(self):
        """Gets the unit_of_measurement of this PropertyFilterInner.  # noqa: E501

        The unit of measurement of the property being described, if applicable.  # noqa: E501

        :return: The unit_of_measurement of this PropertyFilterInner.  # noqa: E501
        :rtype: str
        """
        return self._unit_of_measurement

    @unit_of_measurement.setter
    def unit_of_measurement(self, unit_of_measurement):
        """Sets the unit_of_measurement of this PropertyFilterInner.

        The unit of measurement of the property being described, if applicable.  # noqa: E501

        :param unit_of_measurement: The unit_of_measurement of this PropertyFilterInner.  # noqa: E501
        :type: str
        """

        self._unit_of_measurement = unit_of_measurement

    @property
    def url(self):
        """Gets the url of this PropertyFilterInner.  # noqa: E501

        The URL associated with the property being described, if applicable.  # noqa: E501

        :return: The url of this PropertyFilterInner.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this PropertyFilterInner.

        The URL associated with the property being described, if applicable.  # noqa: E501

        :param url: The url of this PropertyFilterInner.  # noqa: E501
        :type: str
        """

        self._url = url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PropertyFilterInner, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PropertyFilterInner):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
