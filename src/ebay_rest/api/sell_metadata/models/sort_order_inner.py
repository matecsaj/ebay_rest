# coding: utf-8

"""
    Metadata API

    The Metadata API has operations that retrieve configuration details pertaining to the different eBay marketplaces. In addition to marketplace information, the API also has operations that get information that helps sellers list items on eBay.  # noqa: E501

    OpenAPI spec version: v1.11.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SortOrderInner(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sort_order': 'SortOrderProperties',
        'sort_priority': 'str'
    }

    attribute_map = {
        'sort_order': 'sortOrder',
        'sort_priority': 'sortPriority'
    }

    def __init__(self, sort_order=None, sort_priority=None):  # noqa: E501
        """SortOrderInner - a model defined in Swagger"""  # noqa: E501
        self._sort_order = None
        self._sort_priority = None
        self.discriminator = None
        if sort_order is not None:
            self.sort_order = sort_order
        if sort_priority is not None:
            self.sort_priority = sort_priority

    @property
    def sort_order(self):
        """Gets the sort_order of this SortOrderInner.  # noqa: E501


        :return: The sort_order of this SortOrderInner.  # noqa: E501
        :rtype: SortOrderProperties
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this SortOrderInner.


        :param sort_order: The sort_order of this SortOrderInner.  # noqa: E501
        :type: SortOrderProperties
        """

        self._sort_order = sort_order

    @property
    def sort_priority(self):
        """Gets the sort_priority of this SortOrderInner.  # noqa: E501

        The priority of the specified sort order provided.<br><br>For example, when a property is assigned <code>Sort1</code>, its values are sorted first. Values for the property assigned <code>Sort2</code> are sorted second, and so on.<br><br><b>Valid values</b>:<ul><li><code>Sort1</code></li><li><code>Sort2</code></li><li><code>Sort3</code></li><li><code>Sort4</code></li><li><code>Sort5</code></li></ul>  # noqa: E501

        :return: The sort_priority of this SortOrderInner.  # noqa: E501
        :rtype: str
        """
        return self._sort_priority

    @sort_priority.setter
    def sort_priority(self, sort_priority):
        """Sets the sort_priority of this SortOrderInner.

        The priority of the specified sort order provided.<br><br>For example, when a property is assigned <code>Sort1</code>, its values are sorted first. Values for the property assigned <code>Sort2</code> are sorted second, and so on.<br><br><b>Valid values</b>:<ul><li><code>Sort1</code></li><li><code>Sort2</code></li><li><code>Sort3</code></li><li><code>Sort4</code></li><li><code>Sort5</code></li></ul>  # noqa: E501

        :param sort_priority: The sort_priority of this SortOrderInner.  # noqa: E501
        :type: str
        """

        self._sort_priority = sort_priority

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SortOrderInner, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SortOrderInner):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
