# coding: utf-8

"""
    Metadata API

    The Metadata API has operations that retrieve configuration details pertaining to the different eBay marketplaces. In addition to marketplace information, the API also has operations that get information that helps sellers list items on eBay.  # noqa: E501

    OpenAPI spec version: v1.11.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ItemConditionDescriptorValue(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'condition_descriptor_value_additional_help_text': 'list[str]',
        'condition_descriptor_value_constraints': 'list[ItemConditionDescriptorValueConstraint]',
        'condition_descriptor_value_help_text': 'str',
        'condition_descriptor_value_id': 'str',
        'condition_descriptor_value_name': 'str'
    }

    attribute_map = {
        'condition_descriptor_value_additional_help_text': 'conditionDescriptorValueAdditionalHelpText',
        'condition_descriptor_value_constraints': 'conditionDescriptorValueConstraints',
        'condition_descriptor_value_help_text': 'conditionDescriptorValueHelpText',
        'condition_descriptor_value_id': 'conditionDescriptorValueId',
        'condition_descriptor_value_name': 'conditionDescriptorValueName'
    }

    def __init__(self, condition_descriptor_value_additional_help_text=None, condition_descriptor_value_constraints=None, condition_descriptor_value_help_text=None, condition_descriptor_value_id=None, condition_descriptor_value_name=None):  # noqa: E501
        """ItemConditionDescriptorValue - a model defined in Swagger"""  # noqa: E501
        self._condition_descriptor_value_additional_help_text = None
        self._condition_descriptor_value_constraints = None
        self._condition_descriptor_value_help_text = None
        self._condition_descriptor_value_id = None
        self._condition_descriptor_value_name = None
        self.discriminator = None
        if condition_descriptor_value_additional_help_text is not None:
            self.condition_descriptor_value_additional_help_text = condition_descriptor_value_additional_help_text
        if condition_descriptor_value_constraints is not None:
            self.condition_descriptor_value_constraints = condition_descriptor_value_constraints
        if condition_descriptor_value_help_text is not None:
            self.condition_descriptor_value_help_text = condition_descriptor_value_help_text
        if condition_descriptor_value_id is not None:
            self.condition_descriptor_value_id = condition_descriptor_value_id
        if condition_descriptor_value_name is not None:
            self.condition_descriptor_value_name = condition_descriptor_value_name

    @property
    def condition_descriptor_value_additional_help_text(self):
        """Gets the condition_descriptor_value_additional_help_text of this ItemConditionDescriptorValue.  # noqa: E501

        Additional information about the the condition of the item that is not included in the <b>conditionDescriptorValueHelpText</b> field.  # noqa: E501

        :return: The condition_descriptor_value_additional_help_text of this ItemConditionDescriptorValue.  # noqa: E501
        :rtype: list[str]
        """
        return self._condition_descriptor_value_additional_help_text

    @condition_descriptor_value_additional_help_text.setter
    def condition_descriptor_value_additional_help_text(self, condition_descriptor_value_additional_help_text):
        """Sets the condition_descriptor_value_additional_help_text of this ItemConditionDescriptorValue.

        Additional information about the the condition of the item that is not included in the <b>conditionDescriptorValueHelpText</b> field.  # noqa: E501

        :param condition_descriptor_value_additional_help_text: The condition_descriptor_value_additional_help_text of this ItemConditionDescriptorValue.  # noqa: E501
        :type: list[str]
        """

        self._condition_descriptor_value_additional_help_text = condition_descriptor_value_additional_help_text

    @property
    def condition_descriptor_value_constraints(self):
        """Gets the condition_descriptor_value_constraints of this ItemConditionDescriptorValue.  # noqa: E501

        The constraints on a condition descriptor value, such as which descriptor value IDs and Descriptor ID it is associated with.  # noqa: E501

        :return: The condition_descriptor_value_constraints of this ItemConditionDescriptorValue.  # noqa: E501
        :rtype: list[ItemConditionDescriptorValueConstraint]
        """
        return self._condition_descriptor_value_constraints

    @condition_descriptor_value_constraints.setter
    def condition_descriptor_value_constraints(self, condition_descriptor_value_constraints):
        """Sets the condition_descriptor_value_constraints of this ItemConditionDescriptorValue.

        The constraints on a condition descriptor value, such as which descriptor value IDs and Descriptor ID it is associated with.  # noqa: E501

        :param condition_descriptor_value_constraints: The condition_descriptor_value_constraints of this ItemConditionDescriptorValue.  # noqa: E501
        :type: list[ItemConditionDescriptorValueConstraint]
        """

        self._condition_descriptor_value_constraints = condition_descriptor_value_constraints

    @property
    def condition_descriptor_value_help_text(self):
        """Gets the condition_descriptor_value_help_text of this ItemConditionDescriptorValue.  # noqa: E501

        A detailed description of the condition descriptor value.   # noqa: E501

        :return: The condition_descriptor_value_help_text of this ItemConditionDescriptorValue.  # noqa: E501
        :rtype: str
        """
        return self._condition_descriptor_value_help_text

    @condition_descriptor_value_help_text.setter
    def condition_descriptor_value_help_text(self, condition_descriptor_value_help_text):
        """Sets the condition_descriptor_value_help_text of this ItemConditionDescriptorValue.

        A detailed description of the condition descriptor value.   # noqa: E501

        :param condition_descriptor_value_help_text: The condition_descriptor_value_help_text of this ItemConditionDescriptorValue.  # noqa: E501
        :type: str
        """

        self._condition_descriptor_value_help_text = condition_descriptor_value_help_text

    @property
    def condition_descriptor_value_id(self):
        """Gets the condition_descriptor_value_id of this ItemConditionDescriptorValue.  # noqa: E501

        The unique identification number of a condition descriptor value associated with the <b>conditionDescriptorValueName</b>.  # noqa: E501

        :return: The condition_descriptor_value_id of this ItemConditionDescriptorValue.  # noqa: E501
        :rtype: str
        """
        return self._condition_descriptor_value_id

    @condition_descriptor_value_id.setter
    def condition_descriptor_value_id(self, condition_descriptor_value_id):
        """Sets the condition_descriptor_value_id of this ItemConditionDescriptorValue.

        The unique identification number of a condition descriptor value associated with the <b>conditionDescriptorValueName</b>.  # noqa: E501

        :param condition_descriptor_value_id: The condition_descriptor_value_id of this ItemConditionDescriptorValue.  # noqa: E501
        :type: str
        """

        self._condition_descriptor_value_id = condition_descriptor_value_id

    @property
    def condition_descriptor_value_name(self):
        """Gets the condition_descriptor_value_name of this ItemConditionDescriptorValue.  # noqa: E501

        The human-readable label for the condition descriptor value associated with the <b>conditionDescriptorValueID</b>.  # noqa: E501

        :return: The condition_descriptor_value_name of this ItemConditionDescriptorValue.  # noqa: E501
        :rtype: str
        """
        return self._condition_descriptor_value_name

    @condition_descriptor_value_name.setter
    def condition_descriptor_value_name(self, condition_descriptor_value_name):
        """Sets the condition_descriptor_value_name of this ItemConditionDescriptorValue.

        The human-readable label for the condition descriptor value associated with the <b>conditionDescriptorValueID</b>.  # noqa: E501

        :param condition_descriptor_value_name: The condition_descriptor_value_name of this ItemConditionDescriptorValue.  # noqa: E501
        :type: str
        """

        self._condition_descriptor_value_name = condition_descriptor_value_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ItemConditionDescriptorValue, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ItemConditionDescriptorValue):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
