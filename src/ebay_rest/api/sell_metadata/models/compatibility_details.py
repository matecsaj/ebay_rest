# coding: utf-8

"""
    Metadata API

    The Metadata API has operations that retrieve configuration details pertaining to the different eBay marketplaces. In addition to marketplace information, the API also has operations that get information that helps sellers list items on eBay.  # noqa: E501

    OpenAPI spec version: v1.11.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CompatibilityDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'property_name': 'str',
        'property_value': 'str'
    }

    attribute_map = {
        'property_name': 'propertyName',
        'property_value': 'propertyValue'
    }

    def __init__(self, property_name=None, property_value=None):  # noqa: E501
        """CompatibilityDetails - a model defined in Swagger"""  # noqa: E501
        self._property_name = None
        self._property_value = None
        self.discriminator = None
        if property_name is not None:
            self.property_name = property_name
        if property_value is not None:
            self.property_value = property_value

    @property
    def property_name(self):
        """Gets the property_name of this CompatibilityDetails.  # noqa: E501

        The name of the property being described.  # noqa: E501

        :return: The property_name of this CompatibilityDetails.  # noqa: E501
        :rtype: str
        """
        return self._property_name

    @property_name.setter
    def property_name(self, property_name):
        """Sets the property_name of this CompatibilityDetails.

        The name of the property being described.  # noqa: E501

        :param property_name: The property_name of this CompatibilityDetails.  # noqa: E501
        :type: str
        """

        self._property_name = property_name

    @property
    def property_value(self):
        """Gets the property_value of this CompatibilityDetails.  # noqa: E501

        The value for the property specified in the <b>propertyName</b> field.  # noqa: E501

        :return: The property_value of this CompatibilityDetails.  # noqa: E501
        :rtype: str
        """
        return self._property_value

    @property_value.setter
    def property_value(self, property_value):
        """Sets the property_value of this CompatibilityDetails.

        The value for the property specified in the <b>propertyName</b> field.  # noqa: E501

        :param property_value: The property_value of this CompatibilityDetails.  # noqa: E501
        :type: str
        """

        self._property_value = property_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CompatibilityDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CompatibilityDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
