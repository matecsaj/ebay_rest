# coding: utf-8

"""
    Metadata API

    The Metadata API has operations that retrieve configuration details pertaining to the different eBay marketplaces. In addition to marketplace information, the API also has operations that get information that helps sellers list items on eBay.  # noqa: E501

    OpenAPI spec version: v1.11.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ExtendedProducerResponsibilityPolicy(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'category_id': 'str',
        'category_tree_id': 'str',
        'supported_attributes': 'list[ExtendedProducerResponsibility]'
    }

    attribute_map = {
        'category_id': 'categoryId',
        'category_tree_id': 'categoryTreeId',
        'supported_attributes': 'supportedAttributes'
    }

    def __init__(self, category_id=None, category_tree_id=None, supported_attributes=None):  # noqa: E501
        """ExtendedProducerResponsibilityPolicy - a model defined in Swagger"""  # noqa: E501
        self._category_id = None
        self._category_tree_id = None
        self._supported_attributes = None
        self.discriminator = None
        if category_id is not None:
            self.category_id = category_id
        if category_tree_id is not None:
            self.category_tree_id = category_tree_id
        if supported_attributes is not None:
            self.supported_attributes = supported_attributes

    @property
    def category_id(self):
        """Gets the category_id of this ExtendedProducerResponsibilityPolicy.  # noqa: E501

        The unique identifier for the category under which the policy applies.  # noqa: E501

        :return: The category_id of this ExtendedProducerResponsibilityPolicy.  # noqa: E501
        :rtype: str
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this ExtendedProducerResponsibilityPolicy.

        The unique identifier for the category under which the policy applies.  # noqa: E501

        :param category_id: The category_id of this ExtendedProducerResponsibilityPolicy.  # noqa: E501
        :type: str
        """

        self._category_id = category_id

    @property
    def category_tree_id(self):
        """Gets the category_tree_id of this ExtendedProducerResponsibilityPolicy.  # noqa: E501

        The unique identifier for the category tree under which the policy applies.  # noqa: E501

        :return: The category_tree_id of this ExtendedProducerResponsibilityPolicy.  # noqa: E501
        :rtype: str
        """
        return self._category_tree_id

    @category_tree_id.setter
    def category_tree_id(self, category_tree_id):
        """Sets the category_tree_id of this ExtendedProducerResponsibilityPolicy.

        The unique identifier for the category tree under which the policy applies.  # noqa: E501

        :param category_tree_id: The category_tree_id of this ExtendedProducerResponsibilityPolicy.  # noqa: E501
        :type: str
        """

        self._category_tree_id = category_tree_id

    @property
    def supported_attributes(self):
        """Gets the supported_attributes of this ExtendedProducerResponsibilityPolicy.  # noqa: E501

        The details regarding the attributes included in the policy, such as their usage guidelines and whether they can be specified at the listing variation level.  # noqa: E501

        :return: The supported_attributes of this ExtendedProducerResponsibilityPolicy.  # noqa: E501
        :rtype: list[ExtendedProducerResponsibility]
        """
        return self._supported_attributes

    @supported_attributes.setter
    def supported_attributes(self, supported_attributes):
        """Sets the supported_attributes of this ExtendedProducerResponsibilityPolicy.

        The details regarding the attributes included in the policy, such as their usage guidelines and whether they can be specified at the listing variation level.  # noqa: E501

        :param supported_attributes: The supported_attributes of this ExtendedProducerResponsibilityPolicy.  # noqa: E501
        :type: list[ExtendedProducerResponsibility]
        """

        self._supported_attributes = supported_attributes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExtendedProducerResponsibilityPolicy, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExtendedProducerResponsibilityPolicy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
