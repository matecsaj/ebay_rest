# coding: utf-8

"""
    Vero Public API's

    The VeRO API has methods that allow owners of an intellectual property to report eBay listings that infringe on their intellectual property rights. It contains methods to report a listing, retrieve supported VeRO reason codes, and retrieve the status of reported items.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ReportedItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'item_id': 'str',
        'reason_for_failure': 'str',
        'status': 'str'
    }

    attribute_map = {
        'item_id': 'itemId',
        'reason_for_failure': 'reasonForFailure',
        'status': 'status'
    }

    def __init__(self, item_id=None, reason_for_failure=None, status=None):  # noqa: E501
        """ReportedItem - a model defined in Swagger"""  # noqa: E501
        self._item_id = None
        self._reason_for_failure = None
        self._status = None
        self.discriminator = None
        if item_id is not None:
            self.item_id = item_id
        if reason_for_failure is not None:
            self.reason_for_failure = reason_for_failure
        if status is not None:
            self.status = status

    @property
    def item_id(self):
        """Gets the item_id of this ReportedItem.  # noqa: E501

        The unique identifier of the listing that is being reported for copyright, trademark, or intellectual right infringement.  # noqa: E501

        :return: The item_id of this ReportedItem.  # noqa: E501
        :rtype: str
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id):
        """Sets the item_id of this ReportedItem.

        The unique identifier of the listing that is being reported for copyright, trademark, or intellectual right infringement.  # noqa: E501

        :param item_id: The item_id of this ReportedItem.  # noqa: E501
        :type: str
        """

        self._item_id = item_id

    @property
    def reason_for_failure(self):
        """Gets the reason_for_failure of this ReportedItem.  # noqa: E501

        This text explanation is submitted by eBay when the submission of a VeRO Report has failed or was blocked.<br><br>This field is conditionally returned if the <b>status</b> value of the report is <code>ClarificationRequired</code> or <code>SubmissionFailed</code>.  # noqa: E501

        :return: The reason_for_failure of this ReportedItem.  # noqa: E501
        :rtype: str
        """
        return self._reason_for_failure

    @reason_for_failure.setter
    def reason_for_failure(self, reason_for_failure):
        """Sets the reason_for_failure of this ReportedItem.

        This text explanation is submitted by eBay when the submission of a VeRO Report has failed or was blocked.<br><br>This field is conditionally returned if the <b>status</b> value of the report is <code>ClarificationRequired</code> or <code>SubmissionFailed</code>.  # noqa: E501

        :param reason_for_failure: The reason_for_failure of this ReportedItem.  # noqa: E501
        :type: str
        """

        self._reason_for_failure = reason_for_failure

    @property
    def status(self):
        """Gets the status of this ReportedItem.  # noqa: E501

        The current status of the VeRO reported item. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/commerce/vero/types/VeroReportedItemStatusEnum'>eBay API documentation</a>  # noqa: E501

        :return: The status of this ReportedItem.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ReportedItem.

        The current status of the VeRO reported item. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/commerce/vero/types/VeroReportedItemStatusEnum'>eBay API documentation</a>  # noqa: E501

        :param status: The status of this ReportedItem.  # noqa: E501
        :type: str
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReportedItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReportedItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
