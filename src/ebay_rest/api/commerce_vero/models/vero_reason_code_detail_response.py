# coding: utf-8

"""
    Vero Public API's

    The VeRO API has methods that allow owners of an intellectual property to report eBay listings that infringe on their intellectual property rights. It contains methods to report a listing, retrieve supported VeRO reason codes, and retrieve the status of reported items.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class VeroReasonCodeDetailResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'vero_reason_codes': 'list[VeroReasonCode]'
    }

    attribute_map = {
        'vero_reason_codes': 'veroReasonCodes'
    }

    def __init__(self, vero_reason_codes=None):  # noqa: E501
        """VeroReasonCodeDetailResponse - a model defined in Swagger"""  # noqa: E501
        self._vero_reason_codes = None
        self.discriminator = None
        if vero_reason_codes is not None:
            self.vero_reason_codes = vero_reason_codes

    @property
    def vero_reason_codes(self):
        """Gets the vero_reason_codes of this VeroReasonCodeDetailResponse.  # noqa: E501

        This array provides a list of VeRO reason codes, as well as the ID and details of each code, based on the input criteria.<br><br>If a <b>X-EBAY-C-MARKETPLACE-ID</b> header is used, only VeRO reason codes for that specific site will be returned. If this header is not included, all reason codes for all sites are returned.    # noqa: E501

        :return: The vero_reason_codes of this VeroReasonCodeDetailResponse.  # noqa: E501
        :rtype: list[VeroReasonCode]
        """
        return self._vero_reason_codes

    @vero_reason_codes.setter
    def vero_reason_codes(self, vero_reason_codes):
        """Sets the vero_reason_codes of this VeroReasonCodeDetailResponse.

        This array provides a list of VeRO reason codes, as well as the ID and details of each code, based on the input criteria.<br><br>If a <b>X-EBAY-C-MARKETPLACE-ID</b> header is used, only VeRO reason codes for that specific site will be returned. If this header is not included, all reason codes for all sites are returned.    # noqa: E501

        :param vero_reason_codes: The vero_reason_codes of this VeroReasonCodeDetailResponse.  # noqa: E501
        :type: list[VeroReasonCode]
        """

        self._vero_reason_codes = vero_reason_codes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VeroReasonCodeDetailResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VeroReasonCodeDetailResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
