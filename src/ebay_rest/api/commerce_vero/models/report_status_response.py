# coding: utf-8

"""
    Vero Public API's

    The VeRO API has methods that allow owners of an intellectual property to report eBay listings that infringe on their intellectual property rights. It contains methods to report a listing, retrieve supported VeRO reason codes, and retrieve the status of reported items.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ReportStatusResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'reported_item_details': 'list[ReportedItem]',
        'vero_report_id': 'str',
        'vero_report_status': 'str'
    }

    attribute_map = {
        'reported_item_details': 'reportedItemDetails',
        'vero_report_id': 'veroReportId',
        'vero_report_status': 'veroReportStatus'
    }

    def __init__(self, reported_item_details=None, vero_report_id=None, vero_report_status=None):  # noqa: E501
        """ReportStatusResponse - a model defined in Swagger"""  # noqa: E501
        self._reported_item_details = None
        self._vero_report_id = None
        self._vero_report_status = None
        self.discriminator = None
        if reported_item_details is not None:
            self.reported_item_details = reported_item_details
        if vero_report_id is not None:
            self.vero_report_id = vero_report_id
        if vero_report_status is not None:
            self.vero_report_status = vero_report_status

    @property
    def reported_item_details(self):
        """Gets the reported_item_details of this ReportStatusResponse.  # noqa: E501

        This array returns the status for each eBay item that was included as part of the report.<br><br>This array is only returned if the <b>includeItemDetails</b> query parameter is set to <code>true</code>.  # noqa: E501

        :return: The reported_item_details of this ReportStatusResponse.  # noqa: E501
        :rtype: list[ReportedItem]
        """
        return self._reported_item_details

    @reported_item_details.setter
    def reported_item_details(self, reported_item_details):
        """Sets the reported_item_details of this ReportStatusResponse.

        This array returns the status for each eBay item that was included as part of the report.<br><br>This array is only returned if the <b>includeItemDetails</b> query parameter is set to <code>true</code>.  # noqa: E501

        :param reported_item_details: The reported_item_details of this ReportStatusResponse.  # noqa: E501
        :type: list[ReportedItem]
        """

        self._reported_item_details = reported_item_details

    @property
    def vero_report_id(self):
        """Gets the vero_report_id of this ReportStatusResponse.  # noqa: E501

        The unique packet identifier of the VeRO report.  # noqa: E501

        :return: The vero_report_id of this ReportStatusResponse.  # noqa: E501
        :rtype: str
        """
        return self._vero_report_id

    @vero_report_id.setter
    def vero_report_id(self, vero_report_id):
        """Sets the vero_report_id of this ReportStatusResponse.

        The unique packet identifier of the VeRO report.  # noqa: E501

        :param vero_report_id: The vero_report_id of this ReportStatusResponse.  # noqa: E501
        :type: str
        """

        self._vero_report_id = vero_report_id

    @property
    def vero_report_status(self):
        """Gets the vero_report_status of this ReportStatusResponse.  # noqa: E501

        The processing status of the requested VeRO report. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/commerce/vero/types/VeroReportStatusEnum'>eBay API documentation</a>  # noqa: E501

        :return: The vero_report_status of this ReportStatusResponse.  # noqa: E501
        :rtype: str
        """
        return self._vero_report_status

    @vero_report_status.setter
    def vero_report_status(self, vero_report_status):
        """Sets the vero_report_status of this ReportStatusResponse.

        The processing status of the requested VeRO report. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/commerce/vero/types/VeroReportStatusEnum'>eBay API documentation</a>  # noqa: E501

        :param vero_report_status: The vero_report_status of this ReportStatusResponse.  # noqa: E501
        :type: str
        """

        self._vero_report_status = vero_report_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReportStatusResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReportStatusResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
