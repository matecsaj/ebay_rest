# coding: utf-8

"""
    Vero Public API's

    The VeRO API has methods that allow owners of an intellectual property to report eBay listings that infringe on their intellectual property rights. It contains methods to report a listing, retrieve supported VeRO reason codes, and retrieve the status of reported items.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class VeroReasonCodeResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'marketplace_id': 'str',
        'reason_code_details': 'ReasonCodeDetailType'
    }

    attribute_map = {
        'marketplace_id': 'marketplaceId',
        'reason_code_details': 'reasonCodeDetails'
    }

    def __init__(self, marketplace_id=None, reason_code_details=None):  # noqa: E501
        """VeroReasonCodeResponse - a model defined in Swagger"""  # noqa: E501
        self._marketplace_id = None
        self._reason_code_details = None
        self.discriminator = None
        if marketplace_id is not None:
            self.marketplace_id = marketplace_id
        if reason_code_details is not None:
            self.reason_code_details = reason_code_details

    @property
    def marketplace_id(self):
        """Gets the marketplace_id of this VeroReasonCodeResponse.  # noqa: E501

        The eBay site for which reason code details are returned. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/commerce/vero/types/br:MarketplaceIdEnum'>eBay API documentation</a>  # noqa: E501

        :return: The marketplace_id of this VeroReasonCodeResponse.  # noqa: E501
        :rtype: str
        """
        return self._marketplace_id

    @marketplace_id.setter
    def marketplace_id(self, marketplace_id):
        """Sets the marketplace_id of this VeroReasonCodeResponse.

        The eBay site for which reason code details are returned. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/commerce/vero/types/br:MarketplaceIdEnum'>eBay API documentation</a>  # noqa: E501

        :param marketplace_id: The marketplace_id of this VeroReasonCodeResponse.  # noqa: E501
        :type: str
        """

        self._marketplace_id = marketplace_id

    @property
    def reason_code_details(self):
        """Gets the reason_code_details of this VeroReasonCodeResponse.  # noqa: E501


        :return: The reason_code_details of this VeroReasonCodeResponse.  # noqa: E501
        :rtype: ReasonCodeDetailType
        """
        return self._reason_code_details

    @reason_code_details.setter
    def reason_code_details(self, reason_code_details):
        """Sets the reason_code_details of this VeroReasonCodeResponse.


        :param reason_code_details: The reason_code_details of this VeroReasonCodeResponse.  # noqa: E501
        :type: ReasonCodeDetailType
        """

        self._reason_code_details = reason_code_details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VeroReasonCodeResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VeroReasonCodeResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
