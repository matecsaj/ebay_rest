# coding: utf-8

"""
    Vero Public API's

    The VeRO API has methods that allow owners of an intellectual property to report eBay listings that infringe on their intellectual property rights. It contains methods to report a listing, retrieve supported VeRO reason codes, and retrieve the status of reported items.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class VeroReportItemsRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'report_items': 'list[ReportItemDetails]'
    }

    attribute_map = {
        'report_items': 'reportItems'
    }

    def __init__(self, report_items=None):  # noqa: E501
        """VeroReportItemsRequest - a model defined in Swagger"""  # noqa: E501
        self._report_items = None
        self.discriminator = None
        if report_items is not None:
            self.report_items = report_items

    @property
    def report_items(self):
        """Gets the report_items of this VeroReportItemsRequest.  # noqa: E501

        This array is used to report one or more eBay items that are allegedly violating the product owner's copyright, trademark, or intellectual property rights.<br><br>The <b>itemId</b> and <b>veroReasonCodeId</b> fields are required for each reported violation.<br><br><span class=\"tablenote\"><b>Note:</b> You can report the same item more than once if a different reason code is used each time.</span>  # noqa: E501

        :return: The report_items of this VeroReportItemsRequest.  # noqa: E501
        :rtype: list[ReportItemDetails]
        """
        return self._report_items

    @report_items.setter
    def report_items(self, report_items):
        """Sets the report_items of this VeroReportItemsRequest.

        This array is used to report one or more eBay items that are allegedly violating the product owner's copyright, trademark, or intellectual property rights.<br><br>The <b>itemId</b> and <b>veroReasonCodeId</b> fields are required for each reported violation.<br><br><span class=\"tablenote\"><b>Note:</b> You can report the same item more than once if a different reason code is used each time.</span>  # noqa: E501

        :param report_items: The report_items of this VeroReportItemsRequest.  # noqa: E501
        :type: list[ReportItemDetails]
        """

        self._report_items = report_items

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VeroReportItemsRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VeroReportItemsRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
