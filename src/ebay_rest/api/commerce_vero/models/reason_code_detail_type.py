# coding: utf-8

"""
    Vero Public API's

    The VeRO API has methods that allow owners of an intellectual property to report eBay listings that infringe on their intellectual property rights. It contains methods to report a listing, retrieve supported VeRO reason codes, and retrieve the status of reported items.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ReasonCodeDetailType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'brief_text': 'str',
        'detailed_text': 'str',
        'vero_reason_code_id': 'str'
    }

    attribute_map = {
        'brief_text': 'briefText',
        'detailed_text': 'detailedText',
        'vero_reason_code_id': 'veroReasonCodeId'
    }

    def __init__(self, brief_text=None, detailed_text=None, vero_reason_code_id=None):  # noqa: E501
        """ReasonCodeDetailType - a model defined in Swagger"""  # noqa: E501
        self._brief_text = None
        self._detailed_text = None
        self._vero_reason_code_id = None
        self.discriminator = None
        if brief_text is not None:
            self.brief_text = brief_text
        if detailed_text is not None:
            self.detailed_text = detailed_text
        if vero_reason_code_id is not None:
            self.vero_reason_code_id = vero_reason_code_id

    @property
    def brief_text(self):
        """Gets the brief_text of this ReasonCodeDetailType.  # noqa: E501

        The short description of the infringement associated with the reason code.  # noqa: E501

        :return: The brief_text of this ReasonCodeDetailType.  # noqa: E501
        :rtype: str
        """
        return self._brief_text

    @brief_text.setter
    def brief_text(self, brief_text):
        """Sets the brief_text of this ReasonCodeDetailType.

        The short description of the infringement associated with the reason code.  # noqa: E501

        :param brief_text: The brief_text of this ReasonCodeDetailType.  # noqa: E501
        :type: str
        """

        self._brief_text = brief_text

    @property
    def detailed_text(self):
        """Gets the detailed_text of this ReasonCodeDetailType.  # noqa: E501

        The long description of the infringement associated with the reason code.  # noqa: E501

        :return: The detailed_text of this ReasonCodeDetailType.  # noqa: E501
        :rtype: str
        """
        return self._detailed_text

    @detailed_text.setter
    def detailed_text(self, detailed_text):
        """Sets the detailed_text of this ReasonCodeDetailType.

        The long description of the infringement associated with the reason code.  # noqa: E501

        :param detailed_text: The detailed_text of this ReasonCodeDetailType.  # noqa: E501
        :type: str
        """

        self._detailed_text = detailed_text

    @property
    def vero_reason_code_id(self):
        """Gets the vero_reason_code_id of this ReasonCodeDetailType.  # noqa: E501

        The unique identifier of a VeRO reason code.  # noqa: E501

        :return: The vero_reason_code_id of this ReasonCodeDetailType.  # noqa: E501
        :rtype: str
        """
        return self._vero_reason_code_id

    @vero_reason_code_id.setter
    def vero_reason_code_id(self, vero_reason_code_id):
        """Sets the vero_reason_code_id of this ReasonCodeDetailType.

        The unique identifier of a VeRO reason code.  # noqa: E501

        :param vero_reason_code_id: The vero_reason_code_id of this ReasonCodeDetailType.  # noqa: E501
        :type: str
        """

        self._vero_reason_code_id = vero_reason_code_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReasonCodeDetailType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReasonCodeDetailType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
