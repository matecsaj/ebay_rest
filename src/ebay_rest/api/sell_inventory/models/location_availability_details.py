# coding: utf-8

"""
    Inventory API

    The Inventory API is used to create and manage inventory, and then to publish and manage this inventory on an eBay marketplace. There are also methods in this API that will convert eligible, active eBay listings into the Inventory API model.  # noqa: E501

    OpenAPI spec version: 1.18.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LocationAvailabilityDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'merchant_location_key': 'str'
    }

    attribute_map = {
        'merchant_location_key': 'merchantLocationKey'
    }

    def __init__(self, merchant_location_key=None):  # noqa: E501
        """LocationAvailabilityDetails - a model defined in Swagger"""  # noqa: E501
        self._merchant_location_key = None
        self.discriminator = None
        if merchant_location_key is not None:
            self.merchant_location_key = merchant_location_key

    @property
    def merchant_location_key(self):
        """Gets the merchant_location_key of this LocationAvailabilityDetails.  # noqa: E501

        The unique identifier of a seller’s fulfillment center location where inventory is available for the item or item variation.<br><br><span class=\"tablenote\"><b>Note:</b> When creating a location mapping using the <b>createOrReplaceSkuLocationMapping</b> method, the value entered in this field <b>must</b> be associated with a location with the <code>FULFILLMENT_CENTER</code> location type, or an error will occur. Sellers can check the <a href=\"/api-docs/sell/inventory/resources/location/methods/getInventoryLocations#response.locations.locationTypes\" target=\"_blank\">locationTypes</a> array in the response of the <a href=\"/api-docs/sell/inventory/resources/location/methods/getInventoryLocations\" target=\"_blank\">getInventoryLocations</a> method to see if their location has a value of <code>FULFILLMENT_CENTER</code>.</span>  # noqa: E501

        :return: The merchant_location_key of this LocationAvailabilityDetails.  # noqa: E501
        :rtype: str
        """
        return self._merchant_location_key

    @merchant_location_key.setter
    def merchant_location_key(self, merchant_location_key):
        """Sets the merchant_location_key of this LocationAvailabilityDetails.

        The unique identifier of a seller’s fulfillment center location where inventory is available for the item or item variation.<br><br><span class=\"tablenote\"><b>Note:</b> When creating a location mapping using the <b>createOrReplaceSkuLocationMapping</b> method, the value entered in this field <b>must</b> be associated with a location with the <code>FULFILLMENT_CENTER</code> location type, or an error will occur. Sellers can check the <a href=\"/api-docs/sell/inventory/resources/location/methods/getInventoryLocations#response.locations.locationTypes\" target=\"_blank\">locationTypes</a> array in the response of the <a href=\"/api-docs/sell/inventory/resources/location/methods/getInventoryLocations\" target=\"_blank\">getInventoryLocations</a> method to see if their location has a value of <code>FULFILLMENT_CENTER</code>.</span>  # noqa: E501

        :param merchant_location_key: The merchant_location_key of this LocationAvailabilityDetails.  # noqa: E501
        :type: str
        """

        self._merchant_location_key = merchant_location_key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LocationAvailabilityDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LocationAvailabilityDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
