# coding: utf-8

"""
    Inventory API

    The Inventory API is used to create and manage inventory, and then to publish and manage this inventory on an eBay marketplace. There are also methods in this API that will convert eligible, active eBay listings into the Inventory API model.  # noqa: E501

    OpenAPI spec version: 1.18.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SameDayShippingCutOffTimes(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'overrides': 'list[Overrides]',
        'weekly_schedule': 'list[WeeklySchedule]'
    }

    attribute_map = {
        'overrides': 'overrides',
        'weekly_schedule': 'weeklySchedule'
    }

    def __init__(self, overrides=None, weekly_schedule=None):  # noqa: E501
        """SameDayShippingCutOffTimes - a model defined in Swagger"""  # noqa: E501
        self._overrides = None
        self._weekly_schedule = None
        self.discriminator = None
        if overrides is not None:
            self.overrides = overrides
        if weekly_schedule is not None:
            self.weekly_schedule = weekly_schedule

    @property
    def overrides(self):
        """Gets the overrides of this SameDayShippingCutOffTimes.  # noqa: E501

        This container can be used to override the existing cut-off time(s), specified in the <b>weeklySchedule</b> container, for a specific date or date range.  # noqa: E501

        :return: The overrides of this SameDayShippingCutOffTimes.  # noqa: E501
        :rtype: list[Overrides]
        """
        return self._overrides

    @overrides.setter
    def overrides(self, overrides):
        """Sets the overrides of this SameDayShippingCutOffTimes.

        This container can be used to override the existing cut-off time(s), specified in the <b>weeklySchedule</b> container, for a specific date or date range.  # noqa: E501

        :param overrides: The overrides of this SameDayShippingCutOffTimes.  # noqa: E501
        :type: list[Overrides]
        """

        self._overrides = overrides

    @property
    def weekly_schedule(self):
        """Gets the weekly_schedule of this SameDayShippingCutOffTimes.  # noqa: E501

        This container is used to specify the weekly schedule for shipping and handling cut-off times. A cut-off time is required for each business day that the fulfillment center operates. Any orders made after the specified <b>cutOffTime</b> on the specified day(s) of the week will be handled on the next day.  # noqa: E501

        :return: The weekly_schedule of this SameDayShippingCutOffTimes.  # noqa: E501
        :rtype: list[WeeklySchedule]
        """
        return self._weekly_schedule

    @weekly_schedule.setter
    def weekly_schedule(self, weekly_schedule):
        """Sets the weekly_schedule of this SameDayShippingCutOffTimes.

        This container is used to specify the weekly schedule for shipping and handling cut-off times. A cut-off time is required for each business day that the fulfillment center operates. Any orders made after the specified <b>cutOffTime</b> on the specified day(s) of the week will be handled on the next day.  # noqa: E501

        :param weekly_schedule: The weekly_schedule of this SameDayShippingCutOffTimes.  # noqa: E501
        :type: list[WeeklySchedule]
        """

        self._weekly_schedule = weekly_schedule

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SameDayShippingCutOffTimes, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SameDayShippingCutOffTimes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
