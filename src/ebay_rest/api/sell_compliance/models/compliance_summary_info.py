# coding: utf-8

"""
    Compliance API

    Service for providing information to sellers about their listings being non-compliant, or at risk for becoming non-compliant, against eBay listing policies.  # noqa: E501

    OpenAPI spec version: 1.4.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ComplianceSummaryInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'compliance_type': 'str',
        'marketplace_id': 'str',
        'listing_count': 'int'
    }

    attribute_map = {
        'compliance_type': 'complianceType',
        'marketplace_id': 'marketplaceId',
        'listing_count': 'listingCount'
    }

    def __init__(self, compliance_type=None, marketplace_id=None, listing_count=None):  # noqa: E501
        """ComplianceSummaryInfo - a model defined in Swagger"""  # noqa: E501
        self._compliance_type = None
        self._marketplace_id = None
        self._listing_count = None
        self.discriminator = None
        if compliance_type is not None:
            self.compliance_type = compliance_type
        if marketplace_id is not None:
            self.marketplace_id = marketplace_id
        if listing_count is not None:
            self.listing_count = listing_count

    @property
    def compliance_type(self):
        """Gets the compliance_type of this ComplianceSummaryInfo.  # noqa: E501

        This enumeration value indicates the type of compliance. See <a href=\"/api-docs/sell/compliance/types/com:ComplianceTypeEnum\">ComplianceTypeEnum</a> for more information on each compliance type. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/compliance/types/com:ComplianceTypeEnum'>eBay API documentation</a>  # noqa: E501

        :return: The compliance_type of this ComplianceSummaryInfo.  # noqa: E501
        :rtype: str
        """
        return self._compliance_type

    @compliance_type.setter
    def compliance_type(self, compliance_type):
        """Sets the compliance_type of this ComplianceSummaryInfo.

        This enumeration value indicates the type of compliance. See <a href=\"/api-docs/sell/compliance/types/com:ComplianceTypeEnum\">ComplianceTypeEnum</a> for more information on each compliance type. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/compliance/types/com:ComplianceTypeEnum'>eBay API documentation</a>  # noqa: E501

        :param compliance_type: The compliance_type of this ComplianceSummaryInfo.  # noqa: E501
        :type: str
        """

        self._compliance_type = compliance_type

    @property
    def marketplace_id(self):
        """Gets the marketplace_id of this ComplianceSummaryInfo.  # noqa: E501

        This enumeration value indicates the eBay marketplace where the listing violations exist. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/compliance/types/bas:MarketplaceIdEnum'>eBay API documentation</a>  # noqa: E501

        :return: The marketplace_id of this ComplianceSummaryInfo.  # noqa: E501
        :rtype: str
        """
        return self._marketplace_id

    @marketplace_id.setter
    def marketplace_id(self, marketplace_id):
        """Sets the marketplace_id of this ComplianceSummaryInfo.

        This enumeration value indicates the eBay marketplace where the listing violations exist. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/compliance/types/bas:MarketplaceIdEnum'>eBay API documentation</a>  # noqa: E501

        :param marketplace_id: The marketplace_id of this ComplianceSummaryInfo.  # noqa: E501
        :type: str
        """

        self._marketplace_id = marketplace_id

    @property
    def listing_count(self):
        """Gets the listing_count of this ComplianceSummaryInfo.  # noqa: E501

        This integer value indicates the number of eBay listings that are currently violating the compliance type indicated in the <strong>complianceType</strong> field, for the eBay marketplace indicated in the <strong>marketplaceId</strong> field.  # noqa: E501

        :return: The listing_count of this ComplianceSummaryInfo.  # noqa: E501
        :rtype: int
        """
        return self._listing_count

    @listing_count.setter
    def listing_count(self, listing_count):
        """Sets the listing_count of this ComplianceSummaryInfo.

        This integer value indicates the number of eBay listings that are currently violating the compliance type indicated in the <strong>complianceType</strong> field, for the eBay marketplace indicated in the <strong>marketplaceId</strong> field.  # noqa: E501

        :param listing_count: The listing_count of this ComplianceSummaryInfo.  # noqa: E501
        :type: int
        """

        self._listing_count = listing_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ComplianceSummaryInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComplianceSummaryInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
