# coding: utf-8

"""
    Compliance API

    Service for providing information to sellers about their listings being non-compliant, or at risk for becoming non-compliant, against eBay listing policies.  # noqa: E501

    OpenAPI spec version: 1.4.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SuppressViolationRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'compliance_type': 'str',
        'listing_id': 'str'
    }

    attribute_map = {
        'compliance_type': 'complianceType',
        'listing_id': 'listingId'
    }

    def __init__(self, compliance_type=None, listing_id=None):  # noqa: E501
        """SuppressViolationRequest - a model defined in Swagger"""  # noqa: E501
        self._compliance_type = None
        self._listing_id = None
        self.discriminator = None
        if compliance_type is not None:
            self.compliance_type = compliance_type
        if listing_id is not None:
            self.listing_id = listing_id

    @property
    def compliance_type(self):
        """Gets the compliance_type of this SuppressViolationRequest.  # noqa: E501

        The compliance type of the listing violation to suppress is specified in this field. The compliance type for each listing violation is found in the <strong>complianceType</strong> field under the <strong>listingViolations</strong> array in a <strong>getListingViolations</strong> response.<br /><br /><span class=\"tablenote\"> <strong>Note:</strong> At this time, the <strong>suppressViolation</strong> method is only used to suppress aspect adoption listing violations in the 'at-risk' state, so <code>ASPECTS_ADOPTION</code> is currently the only supported value for this field.  </span> For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/compliance/types/com:ComplianceTypeEnum'>eBay API documentation</a>  # noqa: E501

        :return: The compliance_type of this SuppressViolationRequest.  # noqa: E501
        :rtype: str
        """
        return self._compliance_type

    @compliance_type.setter
    def compliance_type(self, compliance_type):
        """Sets the compliance_type of this SuppressViolationRequest.

        The compliance type of the listing violation to suppress is specified in this field. The compliance type for each listing violation is found in the <strong>complianceType</strong> field under the <strong>listingViolations</strong> array in a <strong>getListingViolations</strong> response.<br /><br /><span class=\"tablenote\"> <strong>Note:</strong> At this time, the <strong>suppressViolation</strong> method is only used to suppress aspect adoption listing violations in the 'at-risk' state, so <code>ASPECTS_ADOPTION</code> is currently the only supported value for this field.  </span> For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/compliance/types/com:ComplianceTypeEnum'>eBay API documentation</a>  # noqa: E501

        :param compliance_type: The compliance_type of this SuppressViolationRequest.  # noqa: E501
        :type: str
        """

        self._compliance_type = compliance_type

    @property
    def listing_id(self):
        """Gets the listing_id of this SuppressViolationRequest.  # noqa: E501

        The unique identifier of the listing with the violation(s) is specified in this field. The unique identifier of the listing with the listing violation(s) is found in the <strong>listingId</strong> field under the <strong>listingViolations</strong> array in a <strong>getListingViolations</strong> response.<br /><br /><span class=\"tablenote\"> <strong>Note:</strong> At this time, the <strong>suppressViolation</strong> method is only used to suppress aspect adoption listing violations in the 'at-risk' state, so the listing specified in this field should be a listing with an <code>ASPECTS_ADOPTION</code> violation in the 'at-risk' state.</span>  # noqa: E501

        :return: The listing_id of this SuppressViolationRequest.  # noqa: E501
        :rtype: str
        """
        return self._listing_id

    @listing_id.setter
    def listing_id(self, listing_id):
        """Sets the listing_id of this SuppressViolationRequest.

        The unique identifier of the listing with the violation(s) is specified in this field. The unique identifier of the listing with the listing violation(s) is found in the <strong>listingId</strong> field under the <strong>listingViolations</strong> array in a <strong>getListingViolations</strong> response.<br /><br /><span class=\"tablenote\"> <strong>Note:</strong> At this time, the <strong>suppressViolation</strong> method is only used to suppress aspect adoption listing violations in the 'at-risk' state, so the listing specified in this field should be a listing with an <code>ASPECTS_ADOPTION</code> violation in the 'at-risk' state.</span>  # noqa: E501

        :param listing_id: The listing_id of this SuppressViolationRequest.  # noqa: E501
        :type: str
        """

        self._listing_id = listing_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SuppressViolationRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SuppressViolationRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
